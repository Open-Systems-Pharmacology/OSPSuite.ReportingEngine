configurationPlan$Sections$Id
configurationPlan$Sections
createRESections <- function(sections,
reInputPath,
reOutputPath){
for(sectionIndex in seq(1,length(sections$Id))){
# Create folder and add its path in the structure
path = file.path(reOutputPath,
sprintf('%0.3d_%s',
sections$Id[sectionIndex],
sections$Title[sectionIndex]))
sections$Path[sectionIndex] <- path
dir.create(path)
# Create title markdown within the folder
knitr::knit(text=paste(sections$Title[sectionIndex], "\n"), output = file.path(path, '_title.md'))
# Copy Content
file.copy(file.path(reInputPath, sections$Content[sectionIndex]),
file.path(path, '_content.md'))
# Check for sub-Sections
if (!is.null(sections$Sections[sectionIndex])){
sections <- createRESections(sections,
reInputPath,
path)
}
return(sections)
}
}
sections <- createRESections(configurationPlan$Sections,
"C:/Design2Code/OSPSuite.ReportingEngine/tests/dev/reporting engine input",
"C:/Design2Code/OSPSuite.ReportingEngine/tests/dev/reporting engine output")
configurationPlan$Sections
configurationPlan$Sections$Sections
sectionsOutput <- data.frame(id=NULL,
title = NULL,
content=NULL,
path = NULL)
length(sectionsOutput)
length(sectionsOutput$id)
createRESections <- function(sectionsInput,
reInputPath,
reOutputPath){
sectionsOutput <- data.frame(id=NULL,
title = NULL,
content=NULL,
path = NULL)
for(sectionIndex in seq(1,length(sectionsInput$Id))){
# Create folder and add its path in the structure
path = file.path(reOutputPath,
sprintf('%0.3d_%s',
sectionsInput$Id[sectionIndex],
sectionsInput$Title[sectionIndex]))
dir.create(path)
# Create title markdown within the folder
knitr::knit(text=paste(sectionsInput$Title[sectionIndex], "\n"),
output = file.path(path, '_title.md'))
# Copy Content
file.copy(file.path(reInputPath, sectionsInput$Content[sectionIndex]),
file.path(path, '_content.md'))
sectionsOutput[length(sectionsOutput$id)+1,
c("id, title, content, path")] <- c(sectionsInput[sectionIndex,
c("Id", "Title", "Content")],
path)
# Check for sub-Sections
if (!is.null(sectionsInput$Sections[sectionIndex])){
sectionsOutput <- createRESections(sectionsInput$Sections[sectionIndex]),
reInputPath,
path)
}
return(sectionsOutput)
}
}
createRESections <- function(sectionsInput,
reInputPath,
reOutputPath){
sectionsOutput <- data.frame(id=NULL,
title = NULL,
content=NULL,
path = NULL)
for(sectionIndex in seq(1,length(sectionsInput$Id))){
# Create folder and add its path in the structure
path = file.path(reOutputPath,
sprintf('%0.3d_%s',
sectionsInput$Id[sectionIndex],
sectionsInput$Title[sectionIndex]))
dir.create(path)
# Create title markdown within the folder
knitr::knit(text=paste(sectionsInput$Title[sectionIndex], "\n"),
output = file.path(path, '_title.md'))
# Copy Content
file.copy(file.path(reInputPath, sectionsInput$Content[sectionIndex]),
file.path(path, '_content.md'))
sectionsOutput[length(sectionsOutput$id)+1,
c("id, title, content, path")] <- c(sectionsInput[sectionIndex,
c("Id", "Title", "Content")],
path)
# Check for sub-Sections
if (!is.null(sectionsInput$Sections[sectionIndex])){
sectionsOutput <- createRESections(sectionsInput$Sections[sectionIndex],
reInputPath,
path)
}
return(sectionsOutput)
}
}
sections <- createRESections(configurationPlan$Sections,
"C:/Design2Code/OSPSuite.ReportingEngine/tests/dev/reporting engine input",
"C:/Design2Code/OSPSuite.ReportingEngine/tests/dev/reporting engine output")
createRESections <- function(sectionsInput,
reInputPath,
reOutputPath){
sectionsOutput <- data.frame(id=NULL,
title = NULL,
content=NULL,
path = NULL)
for(sectionIndex in seq(1,length(sectionsInput$Id))){
# Create folder and add its path in the structure
path = file.path(reOutputPath,
sprintf('%0.3d_%s',
sectionsInput$Id[sectionIndex],
sectionsInput$Title[sectionIndex]))
dir.create(path)
# Create title markdown within the folder
knitr::knit(text=paste(sectionsInput$Title[sectionIndex], "\n"),
output = file.path(path, '_title.md'))
# Copy Content
file.copy(file.path(reInputPath, sectionsInput$Content[sectionIndex]),
file.path(path, '_content.md'))
sectionsOutput[length(sectionsOutput$id)+1,
c("id", "title", "content", "path")] <- c(sectionsInput[sectionIndex,
c("Id", "Title", "Content")],
path)
# Check for sub-Sections
if (!is.null(sectionsInput$Sections[sectionIndex])){
sectionsOutput <- createRESections(sectionsInput$Sections[sectionIndex],
reInputPath,
path)
}
return(sectionsOutput)
}
}
sections <- createRESections(configurationPlan$Sections,
"C:/Design2Code/OSPSuite.ReportingEngine/tests/dev/reporting engine input",
"C:/Design2Code/OSPSuite.ReportingEngine/tests/dev/reporting engine output")
createRESections <- function(sectionsInput,
reInputPath,
reOutputPath){
sectionsOutput <- data.frame(id=NULL,
title = NULL,
content=NULL,
path = NULL)
for(sectionIndex in seq(1,length(sectionsInput$Id))){
# Create folder and add its path in the structure
path = file.path(reOutputPath,
sprintf('%0.3d_%s',
sectionsInput$Id[sectionIndex],
sectionsInput$Title[sectionIndex]))
dir.create(path)
print(path)
# Create title markdown within the folder
knitr::knit(text=paste(sectionsInput$Title[sectionIndex], "\n"),
output = file.path(path, '_title.md'))
# Copy Content
file.copy(file.path(reInputPath, sectionsInput$Content[sectionIndex]),
file.path(path, '_content.md'))
sectionsOutput[length(sectionsOutput$id)+1,
c("id", "title", "content", "path")] <- c(sectionsInput[sectionIndex,
c("Id", "Title", "Content")],
path)
# Check for sub-Sections
if (!is.null(sectionsInput$Sections[sectionIndex])){
sectionsOutput <- createRESections(sectionsInput$Sections[sectionIndex],
reInputPath,
path)
}
return(sectionsOutput)
}
}
sections <- createRESections(configurationPlan$Sections,
"C:/Design2Code/OSPSuite.ReportingEngine/tests/dev/reporting engine input",
"C:/Design2Code/OSPSuite.ReportingEngine/tests/dev/reporting engine output")
sections <- createRESections(configurationPlan$Sections,
"C:/Design2Code/OSPSuite.ReportingEngine/tests/dev/reporting engine input",
"C:/Design2Code/OSPSuite.ReportingEngine/tests/dev/reporting engine output")
createRESections <- function(sectionsInput,
reInputPath,
reOutputPath){
sectionsOutput <- data.frame(id=NULL,
title = NULL,
content=NULL,
path = NULL)
for(sectionIndex in seq(1,length(sectionsInput$Id))){
# Create folder and add its path in the structure
path = file.path(reOutputPath,
sprintf('%0.3d_%s',
sectionsInput$Id[sectionIndex],
sectionsInput$Title[sectionIndex]))
dir.create(path)
# Create title markdown within the folder
knitr::knit(text=paste(sectionsInput$Title[sectionIndex], "\n"),
output = file.path(path, '_title.md'))
# Copy Content
file.copy(file.path(reInputPath, sectionsInput$Content[sectionIndex]),
file.path(path, '_content.md'))
sectionsOutput[length(sectionsOutput$id)+1,
c("id", "title", "content", "path")] <- c(sectionsInput[sectionIndex,
c("Id", "Title", "Content")],
path)
# Check for sub-Sections
if (!is.null(sectionsInput$Sections[sectionIndex])){
sectionsOutput <- createRESections(sectionsInput$Sections[sectionIndex],
reInputPath,
reOutputPath = path)
}
return(sectionsOutput)
}
}
sections <- createRESections(configurationPlan$Sections,
"C:/Design2Code/OSPSuite.ReportingEngine/tests/dev/reporting engine input",
"C:/Design2Code/OSPSuite.ReportingEngine/tests/dev/reporting engine output")
createRESections <- function(sectionsInput,
reInputPath,
reOutputPath){
sectionsOutput <- data.frame(id=NULL,
title = NULL,
content=NULL,
path = NULL)
for(sectionIndex in seq(1,length(sectionsInput$Id))){
# Create folder and add its path in the structure
path = file.path(reOutputPath,
sprintf('%0.3d_%s',
sectionsInput$Id[sectionIndex],
sectionsInput$Title[sectionIndex]))
dir.create(as.character(path))
# Create title markdown within the folder
knitr::knit(text=paste(sectionsInput$Title[sectionIndex], "\n"),
output = file.path(path, '_title.md'))
# Copy Content
file.copy(file.path(reInputPath, sectionsInput$Content[sectionIndex]),
file.path(path, '_content.md'))
sectionsOutput[length(sectionsOutput$id)+1,
c("id", "title", "content", "path")] <- c(sectionsInput[sectionIndex,
c("Id", "Title", "Content")],
path)
# Check for sub-Sections
if (!is.null(sectionsInput$Sections[sectionIndex])){
sectionsOutput <- createRESections(sectionsInput$Sections[sectionIndex],
reInputPath,
reOutputPath = path)
}
return(sectionsOutput)
}
}
sections <- createRESections(configurationPlan$Sections,
"C:/Design2Code/OSPSuite.ReportingEngine/tests/dev/reporting engine input",
"C:/Design2Code/OSPSuite.ReportingEngine/tests/dev/reporting engine output")
createRESections <- function(sectionsInput,
reInputPath,
reOutputPath){
sectionsOutput <- data.frame(id=NULL,
title = NULL,
content=NULL,
path = NULL)
for(sectionIndex in seq(1,length(sectionsInput$Id))){
print(sectionsInput$Id[sectionIndex])
# Create folder and add its path in the structure
path = file.path(reOutputPath,
sprintf('%0.3d_%s',
sectionsInput$Id[sectionIndex],
sectionsInput$Title[sectionIndex]))
dir.create(path)
# Create title markdown within the folder
knitr::knit(text=paste(sectionsInput$Title[sectionIndex], "\n"),
output = file.path(path, '_title.md'))
# Copy Content
file.copy(file.path(reInputPath, sectionsInput$Content[sectionIndex]),
file.path(path, '_content.md'))
sectionsOutput[length(sectionsOutput$id)+1,
c("id", "title", "content", "path")] <- c(sectionsInput[sectionIndex,
c("Id", "Title", "Content")],
path)
# Check for sub-Sections
if (!is.null(sectionsInput$Sections[sectionIndex])){
sectionsOutput <- createRESections(sectionsInput$Sections[sectionIndex],
reInputPath,
reOutputPath = path)
}
return(sectionsOutput)
}
}
sections <- createRESections(configurationPlan$Sections,
"C:/Design2Code/OSPSuite.ReportingEngine/tests/dev/reporting engine input",
"C:/Design2Code/OSPSuite.ReportingEngine/tests/dev/reporting engine output")
configurationPlan$Sections[1]
configurationPlan$Sections[[1]]
configurationPlan$Sections$Sections
configurationPlan$Sections$Sections[1]
createRESections <- function(sectionsInput,
reInputPath,
reOutputPath){
sectionsOutput <- data.frame(id=NULL,
title = NULL,
content=NULL,
path = NULL)
for(sectionIndex in seq(1,length(sectionsInput$Id))){
print(sectionsInput$Id[sectionIndex])
# Create folder and add its path in the structure
path = file.path(reOutputPath,
sprintf('%0.3d_%s',
sectionsInput$Id[sectionIndex],
sectionsInput$Title[sectionIndex]))
dir.create(path)
# Create title markdown within the folder
knitr::knit(text=paste(sectionsInput$Title[sectionIndex], "\n"),
output = file.path(path, '_title.md'))
# Copy Content
file.copy(file.path(reInputPath, sectionsInput$Content[sectionIndex]),
file.path(path, '_content.md'))
sectionsOutput[length(sectionsOutput$id)+1,
c("id", "title", "content", "path")] <- c(sectionsInput[sectionIndex,
c("Id", "Title", "Content")],
path)
# Check for sub-Sections
if (!is.null(sectionsInput$Sections[[sectionIndex]])){
sectionsOutput <- createRESections(sectionsInput$Sections[sectionIndex],
reInputPath,
reOutputPath = path)
}
return(sectionsOutput)
}
}
sections <- createRESections(configurationPlan$Sections,
"C:/Design2Code/OSPSuite.ReportingEngine/tests/dev/reporting engine input",
"C:/Design2Code/OSPSuite.ReportingEngine/tests/dev/reporting engine output")
createRESections <- function(sectionsInput,
reInputPath,
reOutputPath){
sectionsOutput <- data.frame(id=NULL,
title = NULL,
content=NULL,
path = NULL)
for(sectionIndex in seq(1,length(sectionsInput$Id))){
print(sectionsInput$Id[sectionIndex])
# Create folder and add its path in the structure
path = file.path(reOutputPath,
sprintf('%0.3d_%s',
sectionsInput$Id[sectionIndex],
sectionsInput$Title[sectionIndex]))
dir.create(path)
# Create title markdown within the folder
knitr::knit(text=paste(sectionsInput$Title[sectionIndex], "\n"),
output = file.path(path, '_title.md'))
# Copy Content
file.copy(file.path(reInputPath, sectionsInput$Content[sectionIndex]),
file.path(path, '_content.md'))
sectionsOutput[length(sectionsOutput$id)+1,
c("id", "title", "content", "path")] <- c(sectionsInput[sectionIndex,
c("Id", "Title", "Content")],
path)
# Check for sub-Sections
if (!is.null(sectionsInput$Sections[[sectionIndex]])){
sectionsOutput <- createRESections(sectionsInput$Sections[sectionIndex],
reInputPath,
reOutputPath = path)
}
}
return(sectionsOutput)
}
sections <- createRESections(configurationPlan$Sections,
"C:/Design2Code/OSPSuite.ReportingEngine/tests/dev/reporting engine input",
"C:/Design2Code/OSPSuite.ReportingEngine/tests/dev/reporting engine output")
sections <- createRESections(configurationPlan$Sections,
"C:/Design2Code/OSPSuite.ReportingEngine/tests/dev/reporting engine input",
"C:/Design2Code/OSPSuite.ReportingEngine/tests/dev/reporting engine output")
configurationPlan$Sections$Sections
configurationPlan$Sections
createRESections <- function(sectionsInput,
reInputPath,
reOutputPath){
sectionsOutput <- data.frame(id=NULL,
title = NULL,
content=NULL,
path = NULL)
for(sectionIndex in seq(1,length(sectionsInput$Id))){
print(sectionsInput$Id[sectionIndex])
# Create folder and add its path in the structure
path = file.path(reOutputPath,
sprintf('%0.3d_%s',
sectionsInput$Id[sectionIndex],
sectionsInput$Title[sectionIndex]))
dir.create(path)
# Create title markdown within the folder
knitr::knit(text=paste(sectionsInput$Title[sectionIndex], "\n"),
output = file.path(path, '_title.md'))
# Copy Content
file.copy(file.path(reInputPath, sectionsInput$Content[sectionIndex]),
file.path(path, '_content.md'))
sectionsOutput[length(sectionsOutput$id)+1,
c("id", "title", "content", "path")] <- c(sectionsInput[sectionIndex,
c("Id", "Title", "Content")],
path)
# Check for sub-Sections
if (!is.null(sectionsInput$Sections[[sectionIndex]])){
sectionsOutput <- createRESections(sectionsInput$Sections[[sectionIndex]],
reInputPath,
reOutputPath = path)
}
}
return(sectionsOutput)
}
configurationPlan$Sections
sections <- createRESections(configurationPlan$Sections,
"C:/Design2Code/OSPSuite.ReportingEngine/tests/dev/reporting engine input",
"C:/Design2Code/OSPSuite.ReportingEngine/tests/dev/reporting engine output")
View(sections)
createRESections <- function(sectionsInput,
reInputPath,
reOutputPath){
sectionsOutput <- data.frame(id=NULL,
title = NULL,
content=NULL,
path = NULL)
for(sectionIndex in seq(1,length(sectionsInput$Id))){
print(sectionsInput$Id[sectionIndex])
# Create folder and add its path in the structure
path = file.path(reOutputPath,
sprintf('%0.3d_%s',
sectionsInput$Id[sectionIndex],
sectionsInput$Title[sectionIndex]))
dir.create(path)
# Create title markdown within the folder
knitr::knit(text=paste(sectionsInput$Title[sectionIndex], "\n"),
output = file.path(path, '_title.md'))
# Copy Content
file.copy(file.path(reInputPath, sectionsInput$Content[sectionIndex]),
file.path(path, '_content.md'))
sectionsOutput[length(sectionsOutput$id)+1,
c("id", "title", "content", "path")] <- c(sectionsInput[sectionIndex,
c("Id", "Title", "Content")],
path)
# Check for sub-Sections
if (!is.null(sectionsInput$Sections[[sectionIndex]])){
subSectionsOutput <- createRESections(sectionsInput$Sections[[sectionIndex]],
reInputPath,
reOutputPath = path)
sectionsOutput <- rbind.data.frame(sectionsOutput, subSectionsOutput)
}
}
return(sectionsOutput)
}
sections <- createRESections(configurationPlan$Sections,
"C:/Design2Code/OSPSuite.ReportingEngine/tests/dev/reporting engine input",
"C:/Design2Code/OSPSuite.ReportingEngine/tests/dev/reporting engine output")
View(sections)
sections$path
sections$path
sections$content
file.path("C:/Design2Code/OSPSuite.ReportingEngine/tests/dev/reporting engine input",
configurationPlan$Sections$Content[1])
?file.path
sections <- createRESections(configurationPlan$Sections,
"C:/Design2Code/OSPSuite.ReportingEngine/tests/dev/reporting engine input",
"C:/Design2Code/OSPSuite.ReportingEngine/tests/dev/reporting engine output")
View(sections)
configurationPlan <- jsonlite::fromJSON("../tests/dev/reporting engine input/report-configuration-plan.json")
sections <- createRESections(configurationPlan$Sections,
"C:/Design2Code/OSPSuite.ReportingEngine/tests/dev/reporting engine input",
"C:/Design2Code/OSPSuite.ReportingEngine/tests/dev/reporting engine output")
file.path("C:/Design2Code/OSPSuite.ReportingEngine/tests/dev/reporting engine input",
configurationPlan$Sections$Content[1])
sections <- createRESections(configurationPlan$Sections,
"C:/Design2Code/OSPSuite.ReportingEngine/tests/dev/reporting engine input",
"C:/Design2Code/OSPSuite.ReportingEngine/tests/dev/reporting engine output")
jsonFile <- "haha"
print(paste("Reporting Engine: Initilization of Configuration Plan from\n",
jsonFile))
?unlink
?dir.exists
?dir.exists
?dir.create
devtools::document()
devtools::document()
source('C:/Design2Code/OSPSuite.ReportingEngine/tests/dev/QualificationWorkflow.R')
configurationPlan$sections
devtools::document()
source('C:/Design2Code/OSPSuite.ReportingEngine/tests/dev/QualificationWorkflow.R')
?warning
devtools::document()
source('C:/Design2Code/OSPSuite.ReportingEngine/tests/dev/QualificationWorkflow.R')
devtools::check()
usethis::use_testthat()
devtools::check()
?expect_warning
expect_exists
devtools::check()
usethis::use_package(testthat, type = "Suggests")
usethis::use_testthat()
usethis::use_test()
setwd("C:/Design2Code/OSPSuite.ReportingEngine/R")
usethis::use_test()
setwd("C:/Design2Code/OSPSuite.ReportingEngine")
usethis::use_test()
usethis::use_testthat()
usethis::use_test("test-reoutput-tree")
usethis::use_test("reoutput-tree")
devtools::document()
devtools::check()
usethis::use_testthat()
usethis::use_test()
usethis::use_test("")
usethis::use_test("multiplication")
devtools::check()
styler:::style_active_pkg()
