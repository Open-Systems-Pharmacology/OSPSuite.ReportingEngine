library(ospsuite)
library(ospsuite.reportingengine)
if(!(mpi.comm.size() == 0)){
mpi.close.Rslaves()
}
#start 2 R workers (slaves) instances (once per WORKFLOW or once per Task?)
mpi.spawn.Rslaves(nslaves = 2)
#load ospsuite lib on the slaves
mpi.bcast.cmd(library('ospsuite'))
mpi.bcast.cmd(library('ospsuite.reportingengine'))
source('C:/Users/ahamadeh/Dropbox/rproject/workflow/parBlueprint.R')
res
res$allQuantityPaths
source('C:/Users/ahamadeh/Dropbox/GitHub/OSP/OSPSuite.ReportingEngine/tests/dev/test-massbalance.R')
amtBalance
source('C:/Users/ahamadeh/Dropbox/GitHub/OSP/OSPSuite.ReportingEngine/tests/dev/test-massbalance.R')
dd<-data.frame(T = c(1,2,3,4), A = c(5,3,2,5) , B = c(9,8,7,6) )
dd
sum(dd[1,c(A,B)])
sum(dd[1,c("A","B")])
pthsVec
resDF$data[1,pthsVec]
pthsVec
resDF$data[1,pthsVec]
source('C:/Users/ahamadeh/Dropbox/GitHub/OSP/OSPSuite.ReportingEngine/tests/dev/test-massbalance.R')
pthsVec
resDF$data[,"Organism|Lumen|LowerIleum|smarties"]
resDF$data[,"Organism|Organism|Gallbladder|smarties"]
resDF$data[,"Organism|Liver|Pericentral|Plasma|smarties"]
resDF$data[,"Organism|Liver|Pericentral|BloodCells|smarties"]
resDF$data[,"Organism|Liver|Pericentral|Interstitial|smarties"]
resDF$data[,"Organism|Liver|Pericentral|Intracellular|smarties"]
mx <- read.csv(file = "tests/dev/massBalanceTestCSV.csv")
pthsVec
]
colnames(mx)
mx1 <- mx[,7:ncol(mx)]
mx1
colnames(mx1)
mx <- read.csv(file = "tests/dev/massBalanceTestCSV.csv",check.names = FALSE)
mx1 <- mx[,7:ncol(mx)]
colnames(mx1)
pthsVec
colnames(mx1)
pthsVec
amtBalance
source('C:/Users/ahamadeh/Dropbox/GitHub/OSP/OSPSuite.ReportingEngine/tests/dev/test-massbalance.R')
source('C:/Users/ahamadeh/Dropbox/GitHub/OSP/OSPSuite.ReportingEngine/tests/dev/test-massbalance.R')
amtBalance
source('C:/Users/ahamadeh/Dropbox/GitHub/OSP/OSPSuite.ReportingEngine/tests/dev/test-massbalance.R')
source('C:/Users/ahamadeh/Dropbox/GitHub/OSP/OSPSuite.ReportingEngine/tests/dev/test-massbalance.R')
amtBalance
pthsVec
mx1
source('C:/Users/ahamadeh/Dropbox/GitHub/OSP/OSPSuite.ReportingEngine/tests/dev/test-massbalance.R')
mx1 <- mx[,7:ncol(mx)]
mx1
mx1
source('C:/Users/ahamadeh/Dropbox/GitHub/OSP/OSPSuite.ReportingEngine/tests/dev/test-massbalance.R')
colnames(mx1)
source('C:/Users/ahamadeh/Dropbox/GitHub/OSP/OSPSuite.ReportingEngine/tests/dev/test-massbalance.R')
wrdBalance
dff <- data.frame(amt = colnames(amtBalance) , colnames(wrdBalance))
dff
colnames(amtBalance)
amtBalance
ff<- colnames(amtBalance)
dff <- data.frame(amt = pthsVec , colnames(mx1))
dff <- data.frame(amt = sort(c(pthsVec,"zzz","zzz")) , wrd = sort(colnames(mx1)))
dff
dff[1,]
write.csv(x = dff, file = "wrdamt.csv")
compounds
?addOutputs
devtools::load_all(".")
devtools::load_all(".")
MeanModel$new( modelFilePath = "./data/simpleMobiEventSim.pkml", calculatedOutputsFolder = "./data/" , modelDisplayName = "simp")
mmm <- MeanModel$new( modelFilePath = "./data/simpleMobiEventSim.pkml", calculatedOutputsFolder = "./data/" , modelDisplayName = "simp")
mmm$simulateMeanModel()
source('C:/Users/ahamadeh/Dropbox/GitHub/OSP/OSPSuite.ReportingEngine/tests/dev/test-massbalance.R')
pths
gg <- list()
gg[[1]]$pths <- c(4,3,2)
gg[1]$pths <- c(4,3,2)
gg <- list()
gg[[1]] = c(2,2,3)
gg
gg[[1]]$ne = c(2,2,3)
mb <- NULL
mb <- cbind(mb,data.frame(ff = c(4,3,2,1)))
mb <- cbind(NULL,data.frame(ff = c(4,3,2,1)))
mb <- data.frame(NULL)
mb <- cbind(NULL,data.frame(ff = c(4,3,2,1)))
kk<-list()
kk$jam = c("4","5")
as.data.frame(list(jam = c("d","g","w") , hem = c(4,2,1)))
as.data.frame(list(jam = c("d","g","w") , hem = c(4,2,1,5)))
as.data.frame(list(jam = c("d","g","w") , hem = c(4,2,1)))
mol <- as.data.frame(list(jam = c("d","g","w") , hem = c(4,2,1)))
mol[["jam"]]
mol[["jam"]][1]
mmm <- MeanModel$new( modelFilePath = "./data/simpleMobiEventSim.pkml", calculatedOutputsFolder = "./data/" , modelDisplayName = "simp")
devtools::load_all(".")
mmm <- MeanModel$new( modelFilePath = "./data/simpleMobiEventSim.pkml", calculatedOutputsFolder = "./data/" , modelDisplayName = "simp")
mmm$simulateMeanModel(saveSimulation = TRUE,calculateMassBalance = TRUE)
devtools::load_all(".")
mmm <- MeanModel$new( modelFilePath = "./data/simpleMobiEventSim.pkml", calculatedOutputsFolder = "./data/" , modelDisplayName = "simp")
mmm$simulateMeanModel(saveSimulation = TRUE,calculateMassBalance = TRUE)
mmm$simulateMeanModel(saveSimulation = FALSE,calculateMassBalance = TRUE)
mmm$massBalance
devtools::load_all(".")
mmm <- MeanModel$new( modelFilePath = "./data/simpleMobiEventSim.pkml", calculatedOutputsFolder = "./data/" , modelDisplayName = "simp")
mmm$simulateMeanModel(saveSimulation = FALSE,calculateMassBalance = TRUE)
mmm$massBalance
mmm$loadedModel
mmm$calculatedOutputs
mmm$calculatedOutputs$data
mmm <- MeanModel$new( modelFilePath = "./data/simpleMobiEventSim.pkml", calculatedOutputsFolder = "./data/" , modelDisplayName = "simp"), mmm$simulateMeanModel(saveSimulation = FALSE,calculateMassBalance = TRUE)
mmm <- MeanModel$new( modelFilePath = "./data/simpleMobiEventSim.pkml", calculatedOutputsFolder = "./data/" , modelDisplayName = "simp"); mmm$simulateMeanModel(saveSimulation = FALSE,calculateMassBalance = TRUE)
devtools::load_all(".")
mmm <- MeanModel$new( modelFilePath = "./data/simpleMobiEventSim.pkml", calculatedOutputsFolder = "./data/" , modelDisplayName = "simp"); mmm$simulateMeanModel(saveSimulation = FALSE,calculateMassBalance = TRUE)
mmm$massBalance
devtools::load_all("."); mmm <- MeanModel$new( modelFilePath = "./data/simpleMobiEventSim.pkml", calculatedOutputsFolder = "./data/" , modelDisplayName = "simp"); mmm$simulateMeanModel(saveSimulation = FALSE,calculateMassBalance = TRUE)
devtools::load_all("."); mmm <- MeanModel$new( modelFilePath = "./data/simpleMobiEventSim.pkml", calculatedOutputsFolder = "./data/" , modelDisplayName = "simp"); mmm$simulateMeanModel(saveSimulation = FALSE,calculateMassBalance = TRUE)
mmm$massBalance
devtools::load_all("."); mmm <- MeanModel$new( modelFilePath = "./data/individualPksimSim.pkml", calculatedOutputsFolder = "./data/" , modelDisplayName = "simp"); mmm$simulateMeanModel(saveSimulation = FALSE,calculateMassBalance = TRUE)
mmm$massBalance
devtools::load_all("."); mmm <- MeanModel$new( modelFilePath = "./data/individualPksimSim.pkml", calculatedOutputsFolder = "./data/" , modelDisplayName = "wb"); mmm$simulateMeanModel(saveSimulation = TRUE ,calculateMassBalance = TRUE)
mmm <- MeanModel$new( modelFilePath = "./data/individualPksimSim.pkml", calculatedOutputsFolder = "./data/" , modelDisplayName = "wb")
mmm$simulateMeanModel(saveSimulation = TRUE ,calculateMassBalance = TRUE)
source('C:/Users/ahamadeh/Dropbox/GitHub/OSP/OSPSuite.ReportingEngine/tests/dev/test-massbalance.R')
devtools::load_all("."); mmm <- MeanModel$new( modelFilePath = "./data/individualPksimSim.pkml", calculatedOutputsFolder = "./data/" , modelDisplayName = "wb"); mmm$simulateMeanModel(saveSimulation = TRUE ,calculateMassBalance = FALSE)
devtools::load_all("."); mmm <- MeanModel$new( modelFilePath = "./data/individualPksimSim.pkml", calculatedOutputsFolder = "./data/" , modelDisplayName = "wb"); mmm$simulateMeanModel(saveSimulation = TRUE ,calculateMassBalance = TRUE)
devtools::load_all("."); mmm <- MeanModel$new( modelFilePath = "./data/individualPksimSim.pkml", calculatedOutputsFolder = "./data/" , modelDisplayName = "wb"); mmm$simulateMeanModel(saveSimulation = TRUE ,calculateMassBalance = TRUE)
devtools::document()
?ospsuite::calculatePKAnalyses
libary(osps)
libary(ospsuite)
library(ospsuite)
library(ospsuite.reportingengine)
loadSimulation("./data/simpleMobiEventSim.pkml")
sim1<-loadSimulation("./data/simpleMobiEventSim.pkml")
sim2<-sim1
sim1$outputSelections
addOutputs(quantitiesOrPaths = "**Concentration**",simulation =sim1 )
addOutputs(quantitiesOrPaths = "*Concentration*",simulation =sim1 )
sim1$outputSelections
LL<-getEnum(sim1)
LL<-getEnum(simulationFilePath = "./data/simpleMobiEventSim.pkml")
addOutputs(quantitiesOrPaths = LL$Organism$blockA$mol1$Concentration$path,simulation =sim1 )
sim1$outputSelections
sim2$outputSelections
sim3<-loadSimulation("./data/simpleMobiEventSim.pkml",loadFromCache = FALSE)
sim3$outputSelections
sim1<-loadSimulation("./data/simpleMobiEventSim.pkml",loadFromCache = FALSE)
sim2<-sim1
addOutputs(quantitiesOrPaths = LL$Organism$blockA$mol1$Concentration$path,simulation =sim1 )
sim1$outputSelections
sim2$outputSelections
sim1<-loadSimulation("./data/simpleMobiEventSim.pkml",loadFromCache = FALSE)
sim1$outputSelections
sim2$outputSelections
sim2$<-sim1
sim2 <-sim1
sim2$outputSelections
addOutputs(quantitiesOrPaths = LL$Organism$blockA$mol1$Concentration$path,simulation =sim1 )
sim2$outputSelections
sim1
sim1$sourceFile
devtools::load_all("."); mmm <- MeanModel$new( modelFilePath = "./data/individualPksimSim.pkml", calculatedOutputsFolder = "./data/" , modelDisplayName = "wb"); mmm$simulateMeanModel(saveSimulation = TRUE ,calculateMassBalance = TRUE)
?stop
devtools::load_all("."); mmm <- MeanModel$new( modelFilePath = "./data/individualPksimSim.pkml", calculatedOutputsFolder = "./data/" , modelDisplayName = "wb"); mmm$simulateMeanModel(saveSimulation = TRUE ,calculateMassBalance = TRUE)
ss <- loadSimulation(filePath = "./data/individualPksimSim.pkml",loadFromCache = FALSE)
devtools::load_all("."); mmm <- MeanModel$new( simModel = ss, calculatedOutputsFolder = "./data/" , modelDisplayName = "wb"); mmm$simulateMeanModel(saveSimulation = TRUE ,calculateMassBalance = TRUE)
devtools::load_all("."); mmm <- MeanModel$new(  calculatedOutputsFolder = "./data/" , modelDisplayName = "wb"); mmm$simulateMeanModel(saveSimulation = TRUE ,calculateMassBalance = TRUE)
devtools::load_all("."); mmm <- MeanModel$new( modelFilePath = "./data/individualPksimSim.pkml", calculatedOutputsFolder = "./data/" , modelDisplayName = "wb"); mmm$simulateMeanModel(saveSimulation = TRUE ,calculateMassBalance = TRUE)
ss <- loadSimulation(filePath = "./data/individualPksimSim.pkml",loadFromCache = FALSE)
res<-runSimulation(ss)
res$allQuantityPaths
ss$outputSelections
ss$outputSelections$allOutputs
ss$outputSelections$allOutputs
unlist(ss$outputSelections$allOutputs)
ss$outputSelections$allOutputs
ss$outputSelections$allOutputs[1]
ss$outputSelections$allOutputs[[1]]
unlist(ss$outputSelections$allOutputs,recursive = TRUE)
unlist(ss$outputSelections$allOutputs,recursive = TRUE)
typeof(ss$outputSelections$allOutputs)
unlist(ss$outputSelections$allOutputs,recursive = TRUE)
unlist(unlist(ss$outputSelections$allOutputs,recursive = TRUE),recursive = TRUE)
loadSimulation("individualPksimSim.pkml")
loadSimulation("./data/simpleMobiEventSim.pkml")
dd <- loadSimulation("./data/simpleMobiEventSim.pkml")
dd <- loadSimulation("./data/individualPksimSim.pkml")
dd <- loadSimulation("./data/individualPksimSim.pkml")
dd <- loadSimulation("./data/individualPksimSim.pkml",loadFromCache = FALSE)
dd <- loadSimulation("./data/individualPksimSim.pkml",loadFromCache = TRUE)
?ospsuite::calculatePKAnalyses
?ospsuite::SimulationPKAnalyses
?ospsuite::PKParameter?
?ospsuite::PKParameter
ospsuite::PKParameter(  )
ospsuite::SimulationPKAnalyses()
ospsuite::SimulationPKAnalyses(LL$Organism$blockB$mol1$Concentration$path)
ospsuite::SimulationPKAnalyses(sim1$outputSelections)
ospsuite::SimulationPKAnalyses(getAllMoleculesMatching(paths = LL$Organism$blockB$mol1$Concentration$path,container = sim1))
ospsuite::calculatePKAnalyses(  SimulationPKAnalyses(getAllMoleculesMatching(paths = LL$Organism$blockB$mol1$Concentration$path,container = sim1)))
ospsuite::calculatePKAnalyses( getAllMoleculesMatching(paths = LL$Organism$blockB$mol1$Concentration$path,container = sim1))''
ospsuite::calculatePKAnalyses( getAllMoleculesMatching(paths = LL$Organism$blockB$mol1$Concentration$path,container = sim1))
?ospsuite::calculatePKAnalyses()
res<-runSimulation(sim1)
calculatePKAnalyses(results = res)
?system.file
?system.file()
ospsuite.reportingengine::system.file()
?ospsuite.reportingengine::system.file()
?ospsuite.reportingengine::system.file()
loadSimulation("./data/paramPopPksimSim.pkml")
popmodsim <- loadSimulation("./data/paramPopPksimSim.pkml")
popmodsim$outputSelections
?ospsuite::exportPKAnalysesToCSV()
?ospsuite::calculatePKAnalyses()
sim1<-loadSimulation("./data/simpleMobiEventSim.pkml")
res<-runSimulation(sim1)
calculatePKAnalyses(results = res)
pka <- calculatePKAnalyses(results = res)
pka
pka$allPKParametersFor(quantityPath = res$allQuantityPaths)
pka$allPKParametersFor(quantityPath = res$allQuantityPaths)
pka <- calculatePKAnalyses(results = res)
pka
exportPKAnalysesToCSV(pkAnalyses = pka,filePath = "./testpka.csv")
sim1<-loadSimulation("./data/individualPksimSim.pkml")
res<-runSimulation(sim1)
pka <- calculatePKAnalyses(results = res)
exportPKAnalysesToCSV(pkAnalyses = pka,filePath = "./testpkawb.csv")
ospsuite::SensitivityAnalysis$new
ospsuite::SensitivityAnalysis$new()
view(ospsuite::SensitivityAnalysis$new())
View(ospsuite::SensitivityAnalysis$new())
View(ospsuite::SensitivityAnalysis$new())
pka
pka
View(ospsuite::SensitivityAnalysis$new())
pka
pka$allPKParametersFor()
pka$simulation
source('C:/Users/ahamadeh/Dropbox/GitHub/OSP/OSPSuite.ReportingEngine/R/user-defined-pk-function.R')
pka$simulation
pka$simulation
source('C:/Users/ahamadeh/Dropbox/GitHub/OSP/OSPSuite.ReportingEngine/R/user-defined-pk-function.R')
source('C:/Users/ahamadeh/Dropbox/GitHub/OSP/OSPSuite.ReportingEngine/R/user-defined-pk-function.R')
source('C:/Users/ahamadeh/Dropbox/GitHub/OSP/OSPSuite.ReportingEngine/R/user-defined-pk-function.R')
source('C:/Users/ahamadeh/Dropbox/GitHub/OSP/OSPSuite.ReportingEngine/R/user-defined-pk-function.R')
source('C:/Users/ahamadeh/Dropbox/GitHub/OSP/OSPSuite.ReportingEngine/R/user-defined-pk-function.R')
source('C:/Users/ahamadeh/Dropbox/GitHub/OSP/OSPSuite.ReportingEngine/R/user-defined-pk-function.R')
source('C:/Users/ahamadeh/Dropbox/GitHub/OSP/OSPSuite.ReportingEngine/R/user-defined-pk-function.R')
source('C:/Users/ahamadeh/Dropbox/GitHub/OSP/OSPSuite.ReportingEngine/R/user-defined-pk-function.R')
source('C:/Users/ahamadeh/Dropbox/GitHub/OSP/OSPSuite.ReportingEngine/R/user-defined-pk-function.R')
pkf$pKFunction(3,4)
pkf
pka
pka$allPKParametersFor()
pka$allPKParametersFor(res$allQuantityPaths)
pka$allPKParametersFor(quantityPath = res$allQuantityPaths)
pka$allPKParametersFor(quantityPath = sim1$outputSelections)
pka$allPKParametersFor(quantityPath = "**")
sim1<-loadSimulation("./data/individualPksimSim.pkml")
sim1<-loadSimulation("./data/individualPksimSim.pkml",loadFromCache = FALSE)
res<-runSimulation(sim1)
pka <- calculatePKAnalyses(results = res)
pka
pka$allPKParametersFor(quantityPath = "**")
pka$allPKParametersFor(quantityPath = "*")
pka$allPKParametersFor(quantityPath = res$allQuantityPaths)
res$allQuantityPaths
pka$allPKParametersFor(quantityPath = res$allQuantityPaths[1])
pka$allPKParametersFor(quantityPath = res$allQuantityPaths[1])[[1]]
pka$pKParameterFor(quantityPath = res$allQuantityPaths,pkParameter = C_max)
pka$pKParameterFor(quantityPath = res$allQuantityPaths,pkParameter = "C_max")
exportResultsToCSV(results = pka,filePath = "./tests/pkreswb.csv")
exportPKAnalysesToCSV(results = pka,filePath = "./tests/pkreswb.csv")
exportPKAnalysesToCSV(pkAnalyses = pka,filePath = "./tests/pkreswb.csv")
pka$pKParameterFor(quantityPath = res$allQuantityPaths[1])
res$allQuantityPaths[1]
?pKParameterFor
?PKParameter
pka$allPKParametersFor(quantityPath = res$allQuantityPaths[1])[[1]]
pka$allPKParametersFor(quantityPath = res$allQuantityPaths[1])[[1]][1]
pka$allPKParametersFor(quantityPath = res$allQuantityPaths[1])[[1]]
pka$ref
exportPKAnalysesToCSV(results = pka,filePath = "./tests/pkreswb.csv")
pka
pka$simulation
gg<-ospsuite::PKparameter$new()
gg<-ospsuite::PKParameter$new()
pka$initialize()
pka$.__enclos_env__
pka$pKParameterFor(quantityPath = res$allQuantityPaths[1])
pka$pKParameterFor(quantityPath = res$allQuantityPaths[1] , pkParameter = pka$allPKParametersFor(quantityPath = res$allQuantityPaths[1]))
pkParameter = pka$allPKParametersFor(quantityPath = res$allQuantityPaths[1])
pk1 = pka$allPKParametersFor(quantityPath = res$allQuantityPaths[1])
pk1
pk1[[1]]
pka$pKParameterFor(quantityPath = res$allQuantityPaths[1] , pkParameter = pk1[[1]])
pexp <- exportPKAnalysesToCSV(results = pka,filePath = "./tests/pkreswb1.csv")
pexp <- exportPKAnalysesToCSV(pkAnalyses = pka,filePath = "./tests/pkreswb1.csv")
pexp
sim1
sim1$outputSelections
sim1$outputSelections[1]
sim1$outputSelections
sim1$outputSelections$allOutputs
mmm<-list()
mmm[1]$name = "joe" , mmm[1]$age = 4
mmm[1]$name = "joe" ; mmm[1]$age = 4
mmm=list()
mmm[[1]]$name = "joe" ; mmm[[1]]$age = 4
mmm=list()
as.data.frame(list(jam = c("d","g","w") , hem = c(4,2,1)))
list(jam = c("d","g","w") , hem = c(4,2,1))
LL <- list(jam = c("d","g","w") , hem = c(4,2,1))
LL$jam
?SensitivityAnalysis
mod(4,3)
9 % 3
9 %% 3
9 %/% 3
15 %/% 3
devtools::load_all("."); mmm <- MeanModel$new( modelFilePath = "./data/individualPksimSim.pkml", calculatedOutputsFolder = "./data/" , modelDisplayName = "wb"); mmm$simulateMeanModel(saveSimulation = TRUE ,calculateMassBalance = FALSE)
devtools::load_all("."); mmm <- MeanModel$new( modelFilePath = "./data/individualPksimSim.pkml", calculatedOutputsFolder = "./data/" , modelDisplayName = "wb"); mmm$simulateMeanModel(saveSimulation = TRUE )
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all("."); mmm <- MeanModel$new( modelFilePath = "./data/individualPksimSim.pkml", calculatedOutputsFolder = "./data/" , modelDisplayName = "wb"); mmm$simulateMeanModel(saveSimulation = TRUE )
source('C:/Users/ahamadeh/Dropbox/GitHub/OSP/OSPSuite.ReportingEngine/R/mean-model.R')
devtools::document()
devtools::load_all("."); mmm <- MeanModel$new( modelFilePath = "./data/individualPksimSim.pkml", calculatedOutputsFolder = "./data/" , modelDisplayName = "wb"); mmm$simulateMeanModel(saveSimulation = TRUE )
mmm <- MeanModel$new( modelFilePath = "./data/individualPksimSim.pkml", calculatedOutputsFolder = "./data/" , modelDisplayName = "wb")
devtools::load_all("."); mmm <- MeanModel$new( modelFilePath = "./data/individualPksimSim.pkml", simulationOutputsFolder = "./data/" , modelDisplayName = "wb"); mmm$simulateMeanModel(saveSimulation = TRUE )
library(ospsuite)
library(ospsuite.reportingengine)
devtools::load_all("."); mmm <- MeanModel$new( modelFilePath = "./data/individualPksimSim.pkml", simulationOutputsFolder = "./data/" , modelDisplayName = "wb"); mmm$simulateMeanModel(saveSimulation = TRUE )
mmm$simulationResults
mmm$simulationResults$resultsForIndividual(0)
mmm$simulationResults$resultsForIndividual(0)[1]
devtools::load_all("."); mmm <- MeanModel$new( modelFilePath = "./data/individualPksimSim.pkml", simulationOutputsFolder = "./data/" , modelDisplayName = "wb"); mmm$simulateMeanModel(saveSimulation = TRUE ), mmm$calculateMassBalance()
devtools::load_all("."); mmm <- MeanModel$new( modelFilePath = "./data/individualPksimSim.pkml", simulationOutputsFolder = "./data/" , modelDisplayName = "wb"); mmm$simulateMeanModel(saveSimulation = TRUE ); mmm$calculateMassBalance()
devtools::load_all("."); mmm <- MeanModel$new( modelFilePath = "./data/individualPksimSim.pkml", simulationOutputsFolder = "./data/" , modelDisplayName = "wb"); mmm$simulateMeanModel(saveSimulation = TRUE ); mmm$calculateMassBalance()
devtools::load_all("."); mmm <- MeanModel$new( modelFilePath = "./data/individualPksimSim.pkml", simulationOutputsFolder = "./data" , modelDisplayName = "wb"); mmm$simulateMeanModel(saveSimulation = TRUE ); mmm$calculateMassBalance()
devtools::load_all("."); mmm <- MeanModel$new( modelFilePath = "./data/individualPksimSim.pkml", simulationOutputsFolder = "./data" , modelDisplayName = "wb"); mmm$simulateMeanModel(saveSimulation = TRUE )
mmm$simulationOutputsFolder
mmm$calculateMassBalance()
devtools::load_all(".")
devtools::document()
devtools::load_all("."); mmm <- MeanModel$new( modelFilePath = "./data/individualPksimSim.pkml", simulationOutputsFolder = "./data" , modelDisplayName = "wb"); mmm$simulateMeanModel(saveSimulation = TRUE )
mmm$calculateMassBalance()
devtools::load_all(".")
source('C:/Users/ahamadeh/Dropbox/GitHub/OSP/OSPSuite.ReportingEngine/R/mean-model.R')
devtools::load_all("."); mmm <- MeanModel$new( modelFilePath = "./data/individualPksimSim.pkml", simulationOutputsFolder = "./data" , modelDisplayName = "wb"); mmm$simulateMeanModel(saveSimulation = TRUE )
mmm$calculateMassBalance()
devtools::load_all("."); mmm <- MeanModel$new( modelFilePath = "./data/individualPksimSim.pkml", simulationOutputsFolder = "./data" , modelDisplayName = "wb"); mmm$simulateMeanModel(saveSimulation = TRUE )
mmm$calculateMassBalance()
devtools::load_all(".")
mmm$calculateMassBalance()
devtools::document()
devtools::load_all(".")
devtools::load_all("."); mmm <- MeanModel$new( modelFilePath = "./data/individualPksimSim.pkml", simulationOutputsFolder = "./data" , modelDisplayName = "wb"); mmm$simulateMeanModel(saveSimulation = TRUE )
mmm$calculateMassBalance()
ff <- "dsds" + "e34"
timestamp("%d.%m.%Y %H:%M")
##------ %d.%m.%Y %H:%M ------##
timestamp("%d.%m.%Y%M%D")
##------ %d.%m.%Y%M%D ------##
timestamp(timestamp=winddata[,1], "%d.%m.%Y %H:%M")
now()
now
Sys.time()
sys.time()
?Sys.time()
?Sys.time(%Y)
Sys.time(%Y)
format(Sys.time(%Y))
format(Sys.time(),%Y)
as.numeric(Sys.time())
Sys.time()
as.numeric(Sys.time())
as.numeric(Sys.time())
sim1<-loadSimulation(filePath = "./data/sim2compounds.pkml",loadFromCache = FALSE)
library(ospsuite)
library(ospsuite.reportingengine)
sim1<-loadSimulation(filePath = "./data/sim2compounds.pkml",loadFromCache = FALSE)
res<-runSimulation(sim1)
res$allQuantityPaths
getOutputValues(simulationResults = res,quantitiesOrPaths = res$allQuantityPaths[1],individualIds = 0)
res$getValuesByPath(path = res$allQuantityPaths[1])
res$getValuesByPath(path = sim1$outputSelections[1])
res$getValuesByPath(path = sim1$outputSelections[[1]])
res$getValuesByPath(path = sim1$outputSelections[[1]],0)
res$getValuesByPath(path = res$allQuantityPaths[1],individualIds = 0\)
res$getValuesByPath(path = res$allQuantityPaths[1],individualIds = 0)
res$getValuesByPath(path = res$allQuantityPaths[1],individualIds = 0)tempFileName
getOutputValues(simulationResults = res,quantitiesOrPaths = res$allQuantityPaths[1],individualIds = 0)
getOutputValues(simulationResults = res,quantitiesOrPaths = res$allQuantityPaths[1],individualIds = ff<-0)
ff <- getOutputValues(simulationResults = res,quantitiesOrPaths = res$allQuantityPaths[1],individualIds = 0)
ff$`Organism|PeripheralVenousBlood|compound1|Plasma (Peripheral Venous Blood)`$x
ff[["`Organism|PeripheralVenousBlood|compound1|Plasma (Peripheral Venous Blood)`"]]
ff[["Organism|PeripheralVenousBlood|compound1|Plasma (Peripheral Venous Blood)"]]
ff[["Organism|PeripheralVenousBlood|compound1|Plasma (Peripheral Venous Blood)"]]$x
devtools::load_all("."); mmm <- MeanModel$new( modelFilePath = "./data/individualPksimSim.pkml", simulationOutputsFolder = "./data" , modelDisplayName = "wb"); mmm$simulateMeanModel(saveSimulation = TRUE )
mmm$calculateMeanModelPkParameters()
mmm$calculateMeanModelPkParameters()
devtools::load_all("."); mmm <- MeanModel$new( modelFilePath = "./data/individualPksimSim.pkml", simulationOutputsFolder = "./data" , modelDisplayName = "wb"); mmm$simulateMeanModel(saveSimulation = TRUE )
mmm$calculateMeanModelPkParameters()
devtools::load_all("."); mmm <- MeanModel$new( modelFilePath = "./data/individualPksimSim.pkml", simulationOutputsFolder = "./data" , modelDisplayName = "wb"); mmm$simulateMeanModel(saveSimulation = TRUE )
mmm$calculateMeanModelPkParameters()
devtools::load_all("."); mmm <- MeanModel$new( modelFilePath = "./data/individualPksimSim.pkml", simulationOutputsFolder = "./data" , modelDisplayName = "wb"); mmm$simulateMeanModel(saveSimulation = TRUE ) ; mmm$calculateMeanModelPkParameters()
source('C:/Users/ahamadeh/Dropbox/GitHub/OSP/OSPSuite.ReportingEngine/R/mean-model.R')
devtools::load_all("."); mmm <- MeanModel$new( modelFilePath = "./data/individualPksimSim.pkml", simulationOutputsFolder = "./data" , modelDisplayName = "wb"); mmm$simulateMeanModel(saveSimulation = TRUE ) ; mmm$calculateMeanModelPkParameters()
devtools::load_all("."); mmm <- MeanModel$new( modelFilePath = "./data/individualPksimSim.pkml", simulationOutputsFolder = "./data" , modelDisplayName = "wb"); mmm$simulateMeanModel(saveSimulation = TRUE ) ; mmm$calculateMeanModelPkParameters()
mmm$PKAnalysis
devtools::load_all("."); mmm <- MeanModel$new( modelFilePath = "./data/individualPksimSim.pkml", simulationOutputsFolder = "./data" , modelDisplayName = "wb"); mmm$simulateMeanModel(saveSimulation = TRUE ) ; mmm$calculateMeanModelPkParameters()
devtools::load_all("."); mmm <- MeanModel$new( modelFilePath = "./data/individualPksimSim.pkml", simulationOutputsFolder = "./data" , modelDisplayName = "wb"); mmm$simulateMeanModel(saveSimulation = TRUE ) ; mmm$calculateMeanModelPkParameters()
devtools::load_all("."); mmm <- MeanModel$new( modelFilePath = "./data/individualPksimSim.pkml", simulationOutputsFolder = "./data" , modelDisplayName = "wb"); mmm$simulateMeanModel(saveSimulation = TRUE ) ; mmm$calculateMeanModelPKParameters()
rm(list=ls()), devtools::load_all("."); mmm <- MeanModel$new( modelFilePath = "./data/individualPksimSim.pkml", simulationOutputsFolder = "./data" , modelDisplayName = "wb"); mmm$simulateMeanModel(saveSimulation = TRUE ) ; mmm$calculateMeanModelPkParameters()
rm(list=ls()) ; devtools::load_all("."); mmm <- MeanModel$new( modelFilePath = "./data/individualPksimSim.pkml", simulationOutputsFolder = "./data" , modelDisplayName = "wb"); mmm$simulateMeanModel(saveSimulation = TRUE ) ; mmm$calculateMeanModelPkParameters()
rm(list=ls()) ; devtools::load_all("."); mmm <- MeanModel$new( modelFilePath = "./data/individualPksimSim.pkml", simulationOutputsFolder = "./data" , modelDisplayName = "wb"); mmm$simulateMeanModel(saveSimulation = TRUE ) ; mmm$calculateMeanModelPKParameters()
rm(list=ls()) ; devtools::load_all("."); mmm <- MeanModel$new( modelFilePath = "./data/individualPksimSim.pkml", simulationOutputsFolder = "./data" , modelDisplayName = "wb"); mmm$simulateMeanModel(saveSimulation = TRUE ) ; mmm$calculateMeanModelPKParameters()
source('C:/Users/ahamadeh/Dropbox/GitHub/OSP/OSPSuite.ReportingEngine/R/mean-model.R')
rm(list=ls()) ; devtools::load_all("."); mmm <- MeanModel$new( modelFilePath = "./data/individualPksimSim.pkml", simulationOutputsFolder = "./data" , modelDisplayName = "wb"); mmm$simulateMeanModel(saveSimulation = TRUE ) ; mmm$calculateMeanModelPKParameters()
rm(list=ls()) ; devtools::load_all("."); mmm <- MeanModel$new( modelFilePath = "./data/individualPksimSim.pkml", simulationOutputsFolder = "./data" , modelDisplayName = "wb"); mmm$simulateMeanModel(saveSimulation = TRUE ) ; mmm$calculateMeanModelPKParameters()
rm(list=ls()) ; devtools::load_all("."); mmm <- MeanModel$new( modelFilePath = "./data/individualPksimSim.pkml", simulationOutputsFolder = "./data" , modelDisplayName = "wb"); mmm$simulateMeanModel(saveSimulation = TRUE ) ; mmm$calculateMeanModelPKParameters()
rm(list=ls()) ; devtools::load_all("."); mmm <- MeanModel$new( modelFilePath = "./data/individualPksimSim.pkml", simulationOutputsFolder = "./data" , modelDisplayName = "wb"); mmm$simulateMeanModel(saveSimulation = TRUE ) ; mmm$calculateMeanModelPKParameters()
rm(list=ls()) ; devtools::load_all("."); mmm <- MeanModel$new( modelFilePath = "./data/individualPksimSim.pkml", simulationOutputsFolder = "./data" , modelDisplayName = "wb"); mmm$simulateMeanModel(saveSimulation = TRUE ) ; mmm$calculateMeanModelPKParameters()
rm(list=ls()) ; devtools::load_all("."); mmm <- MeanModel$new( modelFilePath = "./data/individualPksimSim.pkml", simulationOutputsFolder = "./data" , modelDisplayName = "wb"); mmm$simulateMeanModel(saveSimulation = TRUE ) ; mmm$calculateMeanModelPKParameters()
rm(list=ls()) ; devtools::load_all("."); mmm <- MeanModel$new( modelFilePath = "./data/individualPksimSim.pkml", simulationOutputsFolder = "./data" , modelDisplayName = "wb"); mmm$simulateMeanModel(saveSimulation = TRUE ) ; mmm$calculateMeanModelPKParameters()
rm(list=ls()) ; devtools::load_all("."); mmm <- MeanModel$new( modelFilePath = "./data/individualPksimSim.pkml", simulationOutputsFolder = "./data" , modelDisplayName = "wb"); mmm$simulateMeanModel(saveSimulation = TRUE ) ; mmm$calculateMeanModelPKParameters()
rm(list=ls()) ; devtools::load_all("."); mmm <- MeanModel$new( modelFilePath = "./data/individualPksimSim.pkml", simulationOutputsFolder = "./data" , modelDisplayName = "wb"); mmm$simulateMeanModel(saveSimulation = TRUE ) ; mmm$calculateMeanModelPKParameters()
rm(list=ls()) ; devtools::load_all("."); mmm <- MeanModel$new( modelFilePath = "./data/sim2compounds.pkml", simulationOutputsFolder = "./data" , modelDisplayName = "twoCompound"); mmm$simulateMeanModel(saveSimulation = TRUE ) ; mmm$calculateMeanModelPKParameters()
source('C:/Users/ahamadeh/Dropbox/GitHub/OSP/OSPSuite.ReportingEngine/R/mean-model.R')
rm(list=ls()) ; devtools::load_all("."); mmm <- MeanModel$new( modelFilePath = "./data/sim2compounds.pkml", simulationOutputsFolder = "./data" , modelDisplayName = "twoCompound"); mmm$simulateMeanModel(saveSimulation = TRUE ) ; mmm$calculateMeanModelPKParameters()
rm(list=ls()) ; devtools::load_all("."); mmm <- MeanModel$new( modelFilePath = "./data/sim2compounds.pkml", simulationOutputsFolder = "./data" , modelDisplayName = "twoCompound"); mmm$simulateMeanModel(saveSimulation = TRUE ) ; mmm$calculateMeanModelPKParameters()
rm(list=ls()) ; devtools::load_all("."); mmm <- MeanModel$new( modelFilePath = "./data/sim2compounds.pkml", simulationOutputsFolder = "./data" , modelDisplayName = "twoCompound"); mmm$simulateMeanModel(saveSimulation = TRUE ) ; mmm$calculateMeanModelPKParameters()
rm(list=ls()) ; devtools::load_all("."); mmm <- MeanModel$new( modelFilePath = "./data/sim2compounds.pkml", simulationOutputsFolder = "./data" , modelDisplayName = "twoCompound"); mmm$simulateMeanModel(saveSimulation = TRUE ) ; mmm$calculateMeanModelPKParameters()
rm(list=ls()) ; devtools::load_all("."); mmm <- MeanModel$new( modelFilePath = "./data/sim2compounds.pkml", simulationOutputsFolder = "./data" , modelDisplayName = "twoCompound"); mmm$simulateMeanModel(saveSimulation = TRUE ) ; mmm$calculateMeanModelPKParameters()
rm(list=ls())
devtools::load_all(".")
mmm <- MeanModel$new( modelFilePath = "./data/sim2compounds.pkml", simulationOutputsFolder = "./data" , modelDisplayName = "twoCompound")
mmm$simulateMeanModel(saveSimulation = TRUE )
mmm$calculateMassBalance(saveMassBalance = TRUE)
getMyMin <- function(x=NULL,y){
return(min(y))
}
getMyMax <- function(x=NULL,y){
return(min(y))
}
udPKFunction <- c(
UserDefinedPKFunction$new(pKParameterName = "myMin",pKFunction = getMyMin, pKParameterUnit = "umol" ), ###Manually enter units?
UserDefinedPKFunction$new(pKParameterName = "myMax",pKFunction = getMyMax, pKParameterUnit = "umol" ) ###Manually enter units?
)
udPKFunction
rm(list=ls()) ; devtools::load_all("."); mmm <- MeanModel$new( modelFilePath = "./data/sim2compounds.pkml", simulationOutputsFolder = "./data" , modelDisplayName = "twoCompound"); mmm$simulateMeanModel(saveSimulation = TRUE ) ; mmm$calculateMeanModelPKParameters()
rm(list=ls()) ; devtools::load_all("."); mmm <- MeanModel$new( modelFilePath = "./data/sim2compounds.pkml", simulationOutputsFolder = "./data" , modelDisplayName = "twoCompound"); mmm$simulateMeanModel(saveSimulation = TRUE ) ; mmm$calculateMeanModelPKParameters()
userDefinedPKResults = list()
rm(list=ls()) ; devtools::load_all("."); mmm <- MeanModel$new( modelFilePath = "./data/sim2compounds.pkml", simulationOutputsFolder = "./data" , modelDisplayName = "twoCompound"); mmm$simulateMeanModel(saveSimulation = TRUE ) ; mmm$calculateMeanModelPKParameters()
rm(list=ls()) ; devtools::load_all("."); mmm <- MeanModel$new( modelFilePath = "./data/sim2compounds.pkml", simulationOutputsFolder = "./data" , modelDisplayName = "twoCompound"); mmm$simulateMeanModel(saveSimulation = TRUE ) ; mmm$calculateMeanModelPKParameters()
userDefinedPKResults<-list()
userDefinedPKResults["ab"]<-NULL
userDefinedPKResults
userDefinedPKResults[["ab"]]<-NULL
NULL
userDefinedPKResults
userDefinedPKResults[["ab"]]<-c(userDefinedPKResults[["ab"]],0)
userDefinedPKResults
userDefinedPKResults[["ab"]]<-NULL
rm(list=ls()) ; devtools::load_all("."); mmm <- MeanModel$new( modelFilePath = "./data/sim2compounds.pkml", simulationOutputsFolder = "./data" , modelDisplayName = "twoCompound"); mmm$simulateMeanModel(saveSimulation = TRUE ) ; mmm$calculateMeanModelPKParameters()
devtools::document()
rm(list=ls()) ; devtools::load_all("."); mmm <- MeanModel$new( modelFilePath = "./data/sim2compounds.pkml", simulationOutputsFolder = "./data" , modelDisplayName = "twoCompound"); mmm$simulateMeanModel(saveSimulation = TRUE ) ; mmm$calculateMeanModelPKParameters()
rm(list=ls()) ; devtools::load_all("."); mmm <- MeanModel$new( modelFilePath = "./data/sim2compounds.pkml", simulationOutputsFolder = "./data" , modelDisplayName = "twoCompound"); mmm$simulateMeanModel(saveSimulation = TRUE ) ; mmm$calculateMeanModelPKParameters()
source('C:/Users/ahamadeh/Dropbox/GitHub/OSP/OSPSuite.ReportingEngine/tests/dev/test-mean-model-workflow.R')
source('C:/Users/ahamadeh/Dropbox/GitHub/OSP/OSPSuite.ReportingEngine/tests/dev/test-mean-model-workflow.R')
source('C:/Users/ahamadeh/Dropbox/GitHub/OSP/OSPSuite.ReportingEngine/tests/dev/test-mean-model-workflow.R')
source('C:/Users/ahamadeh/Dropbox/GitHub/OSP/OSPSuite.ReportingEngine/tests/dev/test-mean-model-workflow.R')
source('C:/Users/ahamadeh/Dropbox/GitHub/OSP/OSPSuite.ReportingEngine/tests/dev/test-mean-model-workflow.R')
source('C:/Users/ahamadeh/Dropbox/GitHub/OSP/OSPSuite.ReportingEngine/tests/dev/test-mean-model-workflow.R')
source('C:/Users/ahamadeh/Dropbox/GitHub/OSP/OSPSuite.ReportingEngine/R/mean-model.R')
source('C:/Users/ahamadeh/Dropbox/GitHub/OSP/OSPSuite.ReportingEngine/tests/dev/test-mean-model-workflow.R')
devtools::document()
source('C:/Users/ahamadeh/Dropbox/GitHub/OSP/OSPSuite.ReportingEngine/tests/dev/test-mean-model-workflow.R')
source('C:/Users/ahamadeh/Dropbox/GitHub/OSP/OSPSuite.ReportingEngine/tests/dev/test-mean-model-workflow.R')
source('C:/Users/ahamadeh/Dropbox/GitHub/OSP/OSPSuite.ReportingEngine/tests/dev/test-rmpi.R')
rm(list=ls())
devtools::load_all(".")
mmm <- MeanModel$new( modelFilePath = "./data/sim2compounds.pkml", simulationOutputsFolder = "./data" , modelDisplayName = "twoCompound")
mmm$simulateMeanModel(saveSimulation = TRUE )
mmm$calculateMassBalance(saveMassBalance = TRUE)
source('C:/Users/ahamadeh/Dropbox/GitHub/OSP/OSPSuite-R/tests/dev/script-sensitivity-analysis.R')
source('C:/Users/ahamadeh/Dropbox/GitHub/OSP/OSPSuite-R/tests/dev/script-sensitivity-analysis.R')
for (output in outputSelections$allOutputs) {
pkSensitivities <- results$allPKParameterSensitivitiesFor(pkParameterName = "AUC", outputPath = output$path, totalSensitivityThreshold = 0.9)
for (pkSensitivity in pkSensitivities) {
print(pkSensitivity)
}
}
for (output in outputSelections$allOutputs) {
pkSensitivities <- results$allPKParameterSensitivitiesFor(pkParameterName = "AUC", outputPath = output$path, totalSensitivityThreshold = 0.2)
for (pkSensitivity in pkSensitivities) {
print(pkSensitivity)
}
}
library(ospsuite)
library(ospsuite.reportingengine)
