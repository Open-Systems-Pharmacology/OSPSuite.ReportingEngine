gg<-ospsuite::PKParameter$new()
pka$initialize()
pka$.__enclos_env__
pka$pKParameterFor(quantityPath = res$allQuantityPaths[1])
pka$pKParameterFor(quantityPath = res$allQuantityPaths[1] , pkParameter = pka$allPKParametersFor(quantityPath = res$allQuantityPaths[1]))
pkParameter = pka$allPKParametersFor(quantityPath = res$allQuantityPaths[1])
pk1 = pka$allPKParametersFor(quantityPath = res$allQuantityPaths[1])
pk1
pk1[[1]]
pka$pKParameterFor(quantityPath = res$allQuantityPaths[1] , pkParameter = pk1[[1]])
pexp <- exportPKAnalysesToCSV(results = pka,filePath = "./tests/pkreswb1.csv")
pexp <- exportPKAnalysesToCSV(pkAnalyses = pka,filePath = "./tests/pkreswb1.csv")
pexp
sim1
sim1$outputSelections
sim1$outputSelections[1]
sim1$outputSelections
sim1$outputSelections$allOutputs
mmm<-list()
mmm[1]$name = "joe" , mmm[1]$age = 4
mmm[1]$name = "joe" ; mmm[1]$age = 4
mmm=list()
mmm[[1]]$name = "joe" ; mmm[[1]]$age = 4
mmm=list()
as.data.frame(list(jam = c("d","g","w") , hem = c(4,2,1)))
list(jam = c("d","g","w") , hem = c(4,2,1))
LL <- list(jam = c("d","g","w") , hem = c(4,2,1))
LL$jam
?SensitivityAnalysis
mod(4,3)
9 % 3
9 %% 3
9 %/% 3
15 %/% 3
devtools::load_all("."); mmm <- MeanModel$new( modelFilePath = "./data/individualPksimSim.pkml", calculatedOutputsFolder = "./data/" , modelDisplayName = "wb"); mmm$simulateMeanModel(saveSimulation = TRUE ,calculateMassBalance = FALSE)
devtools::load_all("."); mmm <- MeanModel$new( modelFilePath = "./data/individualPksimSim.pkml", calculatedOutputsFolder = "./data/" , modelDisplayName = "wb"); mmm$simulateMeanModel(saveSimulation = TRUE )
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all("."); mmm <- MeanModel$new( modelFilePath = "./data/individualPksimSim.pkml", calculatedOutputsFolder = "./data/" , modelDisplayName = "wb"); mmm$simulateMeanModel(saveSimulation = TRUE )
source('C:/Users/ahamadeh/Dropbox/GitHub/OSP/OSPSuite.ReportingEngine/R/mean-model.R')
devtools::document()
devtools::load_all("."); mmm <- MeanModel$new( modelFilePath = "./data/individualPksimSim.pkml", calculatedOutputsFolder = "./data/" , modelDisplayName = "wb"); mmm$simulateMeanModel(saveSimulation = TRUE )
mmm <- MeanModel$new( modelFilePath = "./data/individualPksimSim.pkml", calculatedOutputsFolder = "./data/" , modelDisplayName = "wb")
devtools::load_all("."); mmm <- MeanModel$new( modelFilePath = "./data/individualPksimSim.pkml", simulationOutputsFolder = "./data/" , modelDisplayName = "wb"); mmm$simulateMeanModel(saveSimulation = TRUE )
library(ospsuite)
library(ospsuite.reportingengine)
devtools::load_all("."); mmm <- MeanModel$new( modelFilePath = "./data/individualPksimSim.pkml", simulationOutputsFolder = "./data/" , modelDisplayName = "wb"); mmm$simulateMeanModel(saveSimulation = TRUE )
mmm$simulationResults
mmm$simulationResults$resultsForIndividual(0)
mmm$simulationResults$resultsForIndividual(0)[1]
devtools::load_all("."); mmm <- MeanModel$new( modelFilePath = "./data/individualPksimSim.pkml", simulationOutputsFolder = "./data/" , modelDisplayName = "wb"); mmm$simulateMeanModel(saveSimulation = TRUE ), mmm$calculateMassBalance()
devtools::load_all("."); mmm <- MeanModel$new( modelFilePath = "./data/individualPksimSim.pkml", simulationOutputsFolder = "./data/" , modelDisplayName = "wb"); mmm$simulateMeanModel(saveSimulation = TRUE ); mmm$calculateMassBalance()
devtools::load_all("."); mmm <- MeanModel$new( modelFilePath = "./data/individualPksimSim.pkml", simulationOutputsFolder = "./data/" , modelDisplayName = "wb"); mmm$simulateMeanModel(saveSimulation = TRUE ); mmm$calculateMassBalance()
devtools::load_all("."); mmm <- MeanModel$new( modelFilePath = "./data/individualPksimSim.pkml", simulationOutputsFolder = "./data" , modelDisplayName = "wb"); mmm$simulateMeanModel(saveSimulation = TRUE ); mmm$calculateMassBalance()
devtools::load_all("."); mmm <- MeanModel$new( modelFilePath = "./data/individualPksimSim.pkml", simulationOutputsFolder = "./data" , modelDisplayName = "wb"); mmm$simulateMeanModel(saveSimulation = TRUE )
mmm$simulationOutputsFolder
mmm$calculateMassBalance()
devtools::load_all(".")
devtools::document()
devtools::load_all("."); mmm <- MeanModel$new( modelFilePath = "./data/individualPksimSim.pkml", simulationOutputsFolder = "./data" , modelDisplayName = "wb"); mmm$simulateMeanModel(saveSimulation = TRUE )
mmm$calculateMassBalance()
devtools::load_all(".")
source('C:/Users/ahamadeh/Dropbox/GitHub/OSP/OSPSuite.ReportingEngine/R/mean-model.R')
devtools::load_all("."); mmm <- MeanModel$new( modelFilePath = "./data/individualPksimSim.pkml", simulationOutputsFolder = "./data" , modelDisplayName = "wb"); mmm$simulateMeanModel(saveSimulation = TRUE )
mmm$calculateMassBalance()
devtools::load_all("."); mmm <- MeanModel$new( modelFilePath = "./data/individualPksimSim.pkml", simulationOutputsFolder = "./data" , modelDisplayName = "wb"); mmm$simulateMeanModel(saveSimulation = TRUE )
mmm$calculateMassBalance()
devtools::load_all(".")
mmm$calculateMassBalance()
devtools::document()
devtools::load_all(".")
devtools::load_all("."); mmm <- MeanModel$new( modelFilePath = "./data/individualPksimSim.pkml", simulationOutputsFolder = "./data" , modelDisplayName = "wb"); mmm$simulateMeanModel(saveSimulation = TRUE )
mmm$calculateMassBalance()
ff <- "dsds" + "e34"
timestamp("%d.%m.%Y %H:%M")
##------ %d.%m.%Y %H:%M ------##
timestamp("%d.%m.%Y%M%D")
##------ %d.%m.%Y%M%D ------##
timestamp(timestamp=winddata[,1], "%d.%m.%Y %H:%M")
now()
now
Sys.time()
sys.time()
?Sys.time()
?Sys.time(%Y)
Sys.time(%Y)
format(Sys.time(%Y))
format(Sys.time(),%Y)
as.numeric(Sys.time())
Sys.time()
as.numeric(Sys.time())
as.numeric(Sys.time())
sim1<-loadSimulation(filePath = "./data/sim2compounds.pkml",loadFromCache = FALSE)
library(ospsuite)
library(ospsuite.reportingengine)
sim1<-loadSimulation(filePath = "./data/sim2compounds.pkml",loadFromCache = FALSE)
res<-runSimulation(sim1)
res$allQuantityPaths
getOutputValues(simulationResults = res,quantitiesOrPaths = res$allQuantityPaths[1],individualIds = 0)
res$getValuesByPath(path = res$allQuantityPaths[1])
res$getValuesByPath(path = sim1$outputSelections[1])
res$getValuesByPath(path = sim1$outputSelections[[1]])
res$getValuesByPath(path = sim1$outputSelections[[1]],0)
res$getValuesByPath(path = res$allQuantityPaths[1],individualIds = 0\)
res$getValuesByPath(path = res$allQuantityPaths[1],individualIds = 0)
res$getValuesByPath(path = res$allQuantityPaths[1],individualIds = 0)tempFileName
getOutputValues(simulationResults = res,quantitiesOrPaths = res$allQuantityPaths[1],individualIds = 0)
getOutputValues(simulationResults = res,quantitiesOrPaths = res$allQuantityPaths[1],individualIds = ff<-0)
ff <- getOutputValues(simulationResults = res,quantitiesOrPaths = res$allQuantityPaths[1],individualIds = 0)
ff$`Organism|PeripheralVenousBlood|compound1|Plasma (Peripheral Venous Blood)`$x
ff[["`Organism|PeripheralVenousBlood|compound1|Plasma (Peripheral Venous Blood)`"]]
ff[["Organism|PeripheralVenousBlood|compound1|Plasma (Peripheral Venous Blood)"]]
ff[["Organism|PeripheralVenousBlood|compound1|Plasma (Peripheral Venous Blood)"]]$x
devtools::load_all("."); mmm <- MeanModel$new( modelFilePath = "./data/individualPksimSim.pkml", simulationOutputsFolder = "./data" , modelDisplayName = "wb"); mmm$simulateMeanModel(saveSimulation = TRUE )
mmm$calculateMeanModelPkParameters()
mmm$calculateMeanModelPkParameters()
devtools::load_all("."); mmm <- MeanModel$new( modelFilePath = "./data/individualPksimSim.pkml", simulationOutputsFolder = "./data" , modelDisplayName = "wb"); mmm$simulateMeanModel(saveSimulation = TRUE )
mmm$calculateMeanModelPkParameters()
devtools::load_all("."); mmm <- MeanModel$new( modelFilePath = "./data/individualPksimSim.pkml", simulationOutputsFolder = "./data" , modelDisplayName = "wb"); mmm$simulateMeanModel(saveSimulation = TRUE )
mmm$calculateMeanModelPkParameters()
devtools::load_all("."); mmm <- MeanModel$new( modelFilePath = "./data/individualPksimSim.pkml", simulationOutputsFolder = "./data" , modelDisplayName = "wb"); mmm$simulateMeanModel(saveSimulation = TRUE ) ; mmm$calculateMeanModelPkParameters()
source('C:/Users/ahamadeh/Dropbox/GitHub/OSP/OSPSuite.ReportingEngine/R/mean-model.R')
devtools::load_all("."); mmm <- MeanModel$new( modelFilePath = "./data/individualPksimSim.pkml", simulationOutputsFolder = "./data" , modelDisplayName = "wb"); mmm$simulateMeanModel(saveSimulation = TRUE ) ; mmm$calculateMeanModelPkParameters()
devtools::load_all("."); mmm <- MeanModel$new( modelFilePath = "./data/individualPksimSim.pkml", simulationOutputsFolder = "./data" , modelDisplayName = "wb"); mmm$simulateMeanModel(saveSimulation = TRUE ) ; mmm$calculateMeanModelPkParameters()
mmm$PKAnalysis
devtools::load_all("."); mmm <- MeanModel$new( modelFilePath = "./data/individualPksimSim.pkml", simulationOutputsFolder = "./data" , modelDisplayName = "wb"); mmm$simulateMeanModel(saveSimulation = TRUE ) ; mmm$calculateMeanModelPkParameters()
devtools::load_all("."); mmm <- MeanModel$new( modelFilePath = "./data/individualPksimSim.pkml", simulationOutputsFolder = "./data" , modelDisplayName = "wb"); mmm$simulateMeanModel(saveSimulation = TRUE ) ; mmm$calculateMeanModelPkParameters()
devtools::load_all("."); mmm <- MeanModel$new( modelFilePath = "./data/individualPksimSim.pkml", simulationOutputsFolder = "./data" , modelDisplayName = "wb"); mmm$simulateMeanModel(saveSimulation = TRUE ) ; mmm$calculateMeanModelPKParameters()
rm(list=ls()), devtools::load_all("."); mmm <- MeanModel$new( modelFilePath = "./data/individualPksimSim.pkml", simulationOutputsFolder = "./data" , modelDisplayName = "wb"); mmm$simulateMeanModel(saveSimulation = TRUE ) ; mmm$calculateMeanModelPkParameters()
rm(list=ls()) ; devtools::load_all("."); mmm <- MeanModel$new( modelFilePath = "./data/individualPksimSim.pkml", simulationOutputsFolder = "./data" , modelDisplayName = "wb"); mmm$simulateMeanModel(saveSimulation = TRUE ) ; mmm$calculateMeanModelPkParameters()
rm(list=ls()) ; devtools::load_all("."); mmm <- MeanModel$new( modelFilePath = "./data/individualPksimSim.pkml", simulationOutputsFolder = "./data" , modelDisplayName = "wb"); mmm$simulateMeanModel(saveSimulation = TRUE ) ; mmm$calculateMeanModelPKParameters()
rm(list=ls()) ; devtools::load_all("."); mmm <- MeanModel$new( modelFilePath = "./data/individualPksimSim.pkml", simulationOutputsFolder = "./data" , modelDisplayName = "wb"); mmm$simulateMeanModel(saveSimulation = TRUE ) ; mmm$calculateMeanModelPKParameters()
source('C:/Users/ahamadeh/Dropbox/GitHub/OSP/OSPSuite.ReportingEngine/R/mean-model.R')
rm(list=ls()) ; devtools::load_all("."); mmm <- MeanModel$new( modelFilePath = "./data/individualPksimSim.pkml", simulationOutputsFolder = "./data" , modelDisplayName = "wb"); mmm$simulateMeanModel(saveSimulation = TRUE ) ; mmm$calculateMeanModelPKParameters()
rm(list=ls()) ; devtools::load_all("."); mmm <- MeanModel$new( modelFilePath = "./data/individualPksimSim.pkml", simulationOutputsFolder = "./data" , modelDisplayName = "wb"); mmm$simulateMeanModel(saveSimulation = TRUE ) ; mmm$calculateMeanModelPKParameters()
rm(list=ls()) ; devtools::load_all("."); mmm <- MeanModel$new( modelFilePath = "./data/individualPksimSim.pkml", simulationOutputsFolder = "./data" , modelDisplayName = "wb"); mmm$simulateMeanModel(saveSimulation = TRUE ) ; mmm$calculateMeanModelPKParameters()
rm(list=ls()) ; devtools::load_all("."); mmm <- MeanModel$new( modelFilePath = "./data/individualPksimSim.pkml", simulationOutputsFolder = "./data" , modelDisplayName = "wb"); mmm$simulateMeanModel(saveSimulation = TRUE ) ; mmm$calculateMeanModelPKParameters()
rm(list=ls()) ; devtools::load_all("."); mmm <- MeanModel$new( modelFilePath = "./data/individualPksimSim.pkml", simulationOutputsFolder = "./data" , modelDisplayName = "wb"); mmm$simulateMeanModel(saveSimulation = TRUE ) ; mmm$calculateMeanModelPKParameters()
rm(list=ls()) ; devtools::load_all("."); mmm <- MeanModel$new( modelFilePath = "./data/individualPksimSim.pkml", simulationOutputsFolder = "./data" , modelDisplayName = "wb"); mmm$simulateMeanModel(saveSimulation = TRUE ) ; mmm$calculateMeanModelPKParameters()
rm(list=ls()) ; devtools::load_all("."); mmm <- MeanModel$new( modelFilePath = "./data/individualPksimSim.pkml", simulationOutputsFolder = "./data" , modelDisplayName = "wb"); mmm$simulateMeanModel(saveSimulation = TRUE ) ; mmm$calculateMeanModelPKParameters()
rm(list=ls()) ; devtools::load_all("."); mmm <- MeanModel$new( modelFilePath = "./data/individualPksimSim.pkml", simulationOutputsFolder = "./data" , modelDisplayName = "wb"); mmm$simulateMeanModel(saveSimulation = TRUE ) ; mmm$calculateMeanModelPKParameters()
rm(list=ls()) ; devtools::load_all("."); mmm <- MeanModel$new( modelFilePath = "./data/individualPksimSim.pkml", simulationOutputsFolder = "./data" , modelDisplayName = "wb"); mmm$simulateMeanModel(saveSimulation = TRUE ) ; mmm$calculateMeanModelPKParameters()
rm(list=ls()) ; devtools::load_all("."); mmm <- MeanModel$new( modelFilePath = "./data/sim2compounds.pkml", simulationOutputsFolder = "./data" , modelDisplayName = "twoCompound"); mmm$simulateMeanModel(saveSimulation = TRUE ) ; mmm$calculateMeanModelPKParameters()
source('C:/Users/ahamadeh/Dropbox/GitHub/OSP/OSPSuite.ReportingEngine/R/mean-model.R')
rm(list=ls()) ; devtools::load_all("."); mmm <- MeanModel$new( modelFilePath = "./data/sim2compounds.pkml", simulationOutputsFolder = "./data" , modelDisplayName = "twoCompound"); mmm$simulateMeanModel(saveSimulation = TRUE ) ; mmm$calculateMeanModelPKParameters()
rm(list=ls()) ; devtools::load_all("."); mmm <- MeanModel$new( modelFilePath = "./data/sim2compounds.pkml", simulationOutputsFolder = "./data" , modelDisplayName = "twoCompound"); mmm$simulateMeanModel(saveSimulation = TRUE ) ; mmm$calculateMeanModelPKParameters()
rm(list=ls()) ; devtools::load_all("."); mmm <- MeanModel$new( modelFilePath = "./data/sim2compounds.pkml", simulationOutputsFolder = "./data" , modelDisplayName = "twoCompound"); mmm$simulateMeanModel(saveSimulation = TRUE ) ; mmm$calculateMeanModelPKParameters()
rm(list=ls()) ; devtools::load_all("."); mmm <- MeanModel$new( modelFilePath = "./data/sim2compounds.pkml", simulationOutputsFolder = "./data" , modelDisplayName = "twoCompound"); mmm$simulateMeanModel(saveSimulation = TRUE ) ; mmm$calculateMeanModelPKParameters()
rm(list=ls()) ; devtools::load_all("."); mmm <- MeanModel$new( modelFilePath = "./data/sim2compounds.pkml", simulationOutputsFolder = "./data" , modelDisplayName = "twoCompound"); mmm$simulateMeanModel(saveSimulation = TRUE ) ; mmm$calculateMeanModelPKParameters()
rm(list=ls())
devtools::load_all(".")
mmm <- MeanModel$new( modelFilePath = "./data/sim2compounds.pkml", simulationOutputsFolder = "./data" , modelDisplayName = "twoCompound")
mmm$simulateMeanModel(saveSimulation = TRUE )
mmm$calculateMassBalance(saveMassBalance = TRUE)
getMyMin <- function(x=NULL,y){
return(min(y))
}
getMyMax <- function(x=NULL,y){
return(min(y))
}
udPKFunction <- c(
UserDefinedPKFunction$new(pKParameterName = "myMin",pKFunction = getMyMin, pKParameterUnit = "umol" ), ###Manually enter units?
UserDefinedPKFunction$new(pKParameterName = "myMax",pKFunction = getMyMax, pKParameterUnit = "umol" ) ###Manually enter units?
)
udPKFunction
rm(list=ls()) ; devtools::load_all("."); mmm <- MeanModel$new( modelFilePath = "./data/sim2compounds.pkml", simulationOutputsFolder = "./data" , modelDisplayName = "twoCompound"); mmm$simulateMeanModel(saveSimulation = TRUE ) ; mmm$calculateMeanModelPKParameters()
rm(list=ls()) ; devtools::load_all("."); mmm <- MeanModel$new( modelFilePath = "./data/sim2compounds.pkml", simulationOutputsFolder = "./data" , modelDisplayName = "twoCompound"); mmm$simulateMeanModel(saveSimulation = TRUE ) ; mmm$calculateMeanModelPKParameters()
userDefinedPKResults = list()
rm(list=ls()) ; devtools::load_all("."); mmm <- MeanModel$new( modelFilePath = "./data/sim2compounds.pkml", simulationOutputsFolder = "./data" , modelDisplayName = "twoCompound"); mmm$simulateMeanModel(saveSimulation = TRUE ) ; mmm$calculateMeanModelPKParameters()
rm(list=ls()) ; devtools::load_all("."); mmm <- MeanModel$new( modelFilePath = "./data/sim2compounds.pkml", simulationOutputsFolder = "./data" , modelDisplayName = "twoCompound"); mmm$simulateMeanModel(saveSimulation = TRUE ) ; mmm$calculateMeanModelPKParameters()
userDefinedPKResults<-list()
userDefinedPKResults["ab"]<-NULL
userDefinedPKResults
userDefinedPKResults[["ab"]]<-NULL
NULL
userDefinedPKResults
userDefinedPKResults[["ab"]]<-c(userDefinedPKResults[["ab"]],0)
userDefinedPKResults
userDefinedPKResults[["ab"]]<-NULL
rm(list=ls()) ; devtools::load_all("."); mmm <- MeanModel$new( modelFilePath = "./data/sim2compounds.pkml", simulationOutputsFolder = "./data" , modelDisplayName = "twoCompound"); mmm$simulateMeanModel(saveSimulation = TRUE ) ; mmm$calculateMeanModelPKParameters()
devtools::document()
rm(list=ls()) ; devtools::load_all("."); mmm <- MeanModel$new( modelFilePath = "./data/sim2compounds.pkml", simulationOutputsFolder = "./data" , modelDisplayName = "twoCompound"); mmm$simulateMeanModel(saveSimulation = TRUE ) ; mmm$calculateMeanModelPKParameters()
rm(list=ls()) ; devtools::load_all("."); mmm <- MeanModel$new( modelFilePath = "./data/sim2compounds.pkml", simulationOutputsFolder = "./data" , modelDisplayName = "twoCompound"); mmm$simulateMeanModel(saveSimulation = TRUE ) ; mmm$calculateMeanModelPKParameters()
source('C:/Users/ahamadeh/Dropbox/GitHub/OSP/OSPSuite.ReportingEngine/tests/dev/test-mean-model-workflow.R')
source('C:/Users/ahamadeh/Dropbox/GitHub/OSP/OSPSuite.ReportingEngine/tests/dev/test-mean-model-workflow.R')
source('C:/Users/ahamadeh/Dropbox/GitHub/OSP/OSPSuite.ReportingEngine/tests/dev/test-mean-model-workflow.R')
source('C:/Users/ahamadeh/Dropbox/GitHub/OSP/OSPSuite.ReportingEngine/tests/dev/test-mean-model-workflow.R')
source('C:/Users/ahamadeh/Dropbox/GitHub/OSP/OSPSuite.ReportingEngine/tests/dev/test-mean-model-workflow.R')
source('C:/Users/ahamadeh/Dropbox/GitHub/OSP/OSPSuite.ReportingEngine/tests/dev/test-mean-model-workflow.R')
source('C:/Users/ahamadeh/Dropbox/GitHub/OSP/OSPSuite.ReportingEngine/R/mean-model.R')
source('C:/Users/ahamadeh/Dropbox/GitHub/OSP/OSPSuite.ReportingEngine/tests/dev/test-mean-model-workflow.R')
devtools::document()
source('C:/Users/ahamadeh/Dropbox/GitHub/OSP/OSPSuite.ReportingEngine/tests/dev/test-mean-model-workflow.R')
source('C:/Users/ahamadeh/Dropbox/GitHub/OSP/OSPSuite.ReportingEngine/tests/dev/test-mean-model-workflow.R')
source('C:/Users/ahamadeh/Dropbox/GitHub/OSP/OSPSuite.ReportingEngine/tests/dev/test-rmpi.R')
rm(list=ls())
devtools::load_all(".")
mmm <- MeanModel$new( modelFilePath = "./data/sim2compounds.pkml", simulationOutputsFolder = "./data" , modelDisplayName = "twoCompound")
mmm$simulateMeanModel(saveSimulation = TRUE )
mmm$calculateMassBalance(saveMassBalance = TRUE)
source('C:/Users/ahamadeh/Dropbox/GitHub/OSP/OSPSuite-R/tests/dev/script-sensitivity-analysis.R')
source('C:/Users/ahamadeh/Dropbox/GitHub/OSP/OSPSuite-R/tests/dev/script-sensitivity-analysis.R')
for (output in outputSelections$allOutputs) {
pkSensitivities <- results$allPKParameterSensitivitiesFor(pkParameterName = "AUC", outputPath = output$path, totalSensitivityThreshold = 0.9)
for (pkSensitivity in pkSensitivities) {
print(pkSensitivity)
}
}
for (output in outputSelections$allOutputs) {
pkSensitivities <- results$allPKParameterSensitivitiesFor(pkParameterName = "AUC", outputPath = output$path, totalSensitivityThreshold = 0.2)
for (pkSensitivity in pkSensitivities) {
print(pkSensitivity)
}
}
library(ospsuite)
library(ospsuite.reportingengine)
source('C:/Users/ahamadeh/Dropbox/GitHub/OSP/OSPSuite.ReportingEngine/R/utils-parallel.R')
#' @title splitPopDataFile
#' @description Function to split a population data file for parallel processing
#' @description Input is a CSV population data file
#' @description Output is vector of strings of the name of new CSV files
#' @export
splitPopDataFile <- function(fileName,folderName,numberOfSlaves,numberOfCommentLines){
allPopData <- read.csv(file = paste0(folderName,fileName),
skip = numberOfCommentLines,
check.names = FALSE )
print(head(allPopData))
numRows <- nrow(allPopData)
numLinesPerSlave <- ceiling(numRows/numberOfSlaves)
firstRow<- c(1,((1:(numberOfSlaves-1))*numLinesPerSlave)+1)
lastRow <- c(((1:(numberOfSlaves-1))*numLinesPerSlave),numRows)
newFileNamesVec <- NULL
for (n in 1:numberOfSlaves){
dF <- allPopData[firstRow[n]:lastRow[n],]
newFileName <- paste0("tempPopFile",n,"_",fileName)
newFileNamesVec <- c(newFileNamesVec,newFileName)
write.csv( x = dF , file = paste0(folderName,newFileName) , row.names=FALSE  )
}
return(newFileNamesVec)
}
#' @title removeTempPopFiles
#' @description Function to remove temporary population data files previously created when splitting main population data file for parallelization.
#' @description Input is vector of strings containting names of temporary population data files, as output by function splitPopDataFile
#' @description No output.
#' @export
removeTempPopFiles <- function(folderName,fileNamesVec){
for (n in 1:length(fileNamesVec)){
file.remove(paste0(folderName,fileNamesVec[n]))
}
}
folderName <- "C:/Users/ahamadeh/Dropbox/GitHub/OSP/OSPSuite.ReportingEngine/data/"
fileName   <- "popData.csv"
numberOfSlaves <- 4
flz <- splitPopDataFile(fileName = fileName,
folderName = folderName,
numberOfSlaves = numberOfSlaves,
numberOfCommentLines = 2)
removeTempPopFiles(folderName = folderName, fileNamesVec= flz)
source('C:/Users/ahamadeh/Dropbox/GitHub/OSP/OSPSuite.ReportingEngine/R/utils-parallel.R')
source('C:/Users/ahamadeh/Dropbox/GitHub/OSP/OSPSuite.ReportingEngine/R/utils-parallel.R')
source('C:/Users/ahamadeh/Dropbox/GitHub/OSP/OSPSuite.ReportingEngine/R/utils-parallel.R')
source('C:/Users/ahamadeh/Dropbox/GitHub/OSP/OSPSuite.ReportingEngine/R/utils-parallel.R')
library('Rmpi')
# library(ospsuite)
# library(ospsuite.reportingengine)
# splitPopDataFile <- function(fileName,folderName,numberOfSlaves,numberOfCommentLines){
#   allPopData <- read.csv(file = paste0(folderName,fileName),
#                          skip = numberOfCommentLines,
#                          check.names = FALSE )
#   print(head(allPopData))
#   numRows <- nrow(allPopData)
#   numLinesPerSlave <- ceiling(numRows/numberOfSlaves)
#   firstRow<- c(1,((1:(numberOfSlaves-1))*numLinesPerSlave)+1)
#   lastRow <- c(((1:(numberOfSlaves-1))*numLinesPerSlave),numRows)
#   newFileNamesVec <- NULL
#   for (n in 1:numberOfSlaves){
#     dF <- allPopData[firstRow[n]:lastRow[n],]
#     newFileName <- paste0("tempPopFile",n,"_",fileName)
#     newFileNamesVec <- c(newFileNamesVec,newFileName)
#     write.csv( x = dF , file = paste0(folderName,newFileName) , row.names=FALSE  )
#   }
#   return(newFileNamesVec)
# }
#
# removeTempPopFiles <- function(folderName,fileNamesVec){
#   for (n in 1:length(fileNamesVec)){
#     file.remove(paste0(folderName,fileNamesVec[n]))
#   }
# }
folderName <- "C:/Users/ahamadeh/Dropbox/GitHub/OSP/OSPSuite.ReportingEngine/data/"
fileName   <- "popData.csv"
numberOfSlaves <- 3
fls <- splitPopDataFile(fileName = fileName,
folderName = folderName,
numberOfSlaves = numberOfSlaves,
numberOfCommentLines = 2)
fls
library('Rmpi')
# library(ospsuite)
# library(ospsuite.reportingengine)
# splitPopDataFile <- function(fileName,folderName,numberOfSlaves,numberOfCommentLines){
#   allPopData <- read.csv(file = paste0(folderName,fileName),
#                          skip = numberOfCommentLines,
#                          check.names = FALSE )
#   print(head(allPopData))
#   numRows <- nrow(allPopData)
#   numLinesPerSlave <- ceiling(numRows/numberOfSlaves)
#   firstRow<- c(1,((1:(numberOfSlaves-1))*numLinesPerSlave)+1)
#   lastRow <- c(((1:(numberOfSlaves-1))*numLinesPerSlave),numRows)
#   newFileNamesVec <- NULL
#   for (n in 1:numberOfSlaves){
#     dF <- allPopData[firstRow[n]:lastRow[n],]
#     newFileName <- paste0("tempPopFile",n,"_",fileName)
#     newFileNamesVec <- c(newFileNamesVec,newFileName)
#     write.csv( x = dF , file = paste0(folderName,newFileName) , row.names=FALSE  )
#   }
#   return(newFileNamesVec)
# }
#
# removeTempPopFiles <- function(folderName,fileNamesVec){
#   for (n in 1:length(fileNamesVec)){
#     file.remove(paste0(folderName,fileNamesVec[n]))
#   }
# }
folderName <- "C:/Users/ahamadeh/Dropbox/GitHub/OSP/OSPSuite.ReportingEngine/data/"
fileName   <- "popData.csv"
numberOfSlaves <- 3
fls <- splitPopDataFile(fileName = fileName,
folderName = folderName,
numberOfSlaves = numberOfSlaves,
numberOfCommentLines = 2)
if(!(mpi.comm.size() == 0)){
mpi.close.Rslaves()
}
library('Rmpi')
# library(ospsuite)
# library(ospsuite.reportingengine)
# splitPopDataFile <- function(fileName,folderName,numberOfSlaves,numberOfCommentLines){
#   allPopData <- read.csv(file = paste0(folderName,fileName),
#                          skip = numberOfCommentLines,
#                          check.names = FALSE )
#   print(head(allPopData))
#   numRows <- nrow(allPopData)
#   numLinesPerSlave <- ceiling(numRows/numberOfSlaves)
#   firstRow<- c(1,((1:(numberOfSlaves-1))*numLinesPerSlave)+1)
#   lastRow <- c(((1:(numberOfSlaves-1))*numLinesPerSlave),numRows)
#   newFileNamesVec <- NULL
#   for (n in 1:numberOfSlaves){
#     dF <- allPopData[firstRow[n]:lastRow[n],]
#     newFileName <- paste0("tempPopFile",n,"_",fileName)
#     newFileNamesVec <- c(newFileNamesVec,newFileName)
#     write.csv( x = dF , file = paste0(folderName,newFileName) , row.names=FALSE  )
#   }
#   return(newFileNamesVec)
# }
#
# removeTempPopFiles <- function(folderName,fileNamesVec){
#   for (n in 1:length(fileNamesVec)){
#     file.remove(paste0(folderName,fileNamesVec[n]))
#   }
# }
folderName <- "C:/Users/ahamadeh/Dropbox/GitHub/OSP/OSPSuite.ReportingEngine/data/"
fileName   <- "popData.csv"
numberOfSlaves <- 3
fls <- splitPopDataFile(fileName = fileName,
folderName = folderName,
numberOfSlaves = numberOfSlaves,
numberOfCommentLines = 2)
if(!(mpi.comm.size() == 0)){
mpi.close.Rslaves()
}
#start 2 R workers (slaves) instances (once per WORKFLOW or once per Task?)
mpi.spawn.Rslaves(nslaves = numberOfSlaves)
if(!(mpi.comm.size() == 0)){
mpi.close.Rslaves()
}
library('Rmpi')
# library(ospsuite)
# library(ospsuite.reportingengine)
# splitPopDataFile <- function(fileName,folderName,numberOfSlaves,numberOfCommentLines){
#   allPopData <- read.csv(file = paste0(folderName,fileName),
#                          skip = numberOfCommentLines,
#                          check.names = FALSE )
#   print(head(allPopData))
#   numRows <- nrow(allPopData)
#   numLinesPerSlave <- ceiling(numRows/numberOfSlaves)
#   firstRow<- c(1,((1:(numberOfSlaves-1))*numLinesPerSlave)+1)
#   lastRow <- c(((1:(numberOfSlaves-1))*numLinesPerSlave),numRows)
#   newFileNamesVec <- NULL
#   for (n in 1:numberOfSlaves){
#     dF <- allPopData[firstRow[n]:lastRow[n],]
#     newFileName <- paste0("tempPopFile",n,"_",fileName)
#     newFileNamesVec <- c(newFileNamesVec,newFileName)
#     write.csv( x = dF , file = paste0(folderName,newFileName) , row.names=FALSE  )
#   }
#   return(newFileNamesVec)
# }
#
# removeTempPopFiles <- function(folderName,fileNamesVec){
#   for (n in 1:length(fileNamesVec)){
#     file.remove(paste0(folderName,fileNamesVec[n]))
#   }
# }
folderName <- "C:/Users/ahamadeh/Dropbox/GitHub/OSP/OSPSuite.ReportingEngine/data/"
fileName   <- "popData.csv"
numberOfSlaves <- 3
fls <- splitPopDataFile(fileName = fileName,
folderName = folderName,
numberOfSlaves = numberOfSlaves,
numberOfCommentLines = 2)
if(!(mpi.comm.size() == 0)){
mpi.close.Rslaves()
}
#start 2 R workers (slaves) instances (once per WORKFLOW or once per Task?)
mpi.spawn.Rslaves(nslaves = numberOfSlaves)
mpi.spawn.Rslaves(nslaves = numberOfSlaves)
devtools::load_all(".")
devtools::document()
devtools::install()
devtools::install()
source('C:/Users/ahamadeh/Dropbox/GitHub/OSP/OSPSuite.ReportingEngine/tests/dev/splitfile-test-rmpi.R')
library('Rmpi')
library(ospsuite)
?ospsuite::splitPopulationFile
library('Rmpi')
library(ospsuite)
theNumberOfSlaves <- 5
theFolderName <- "C:/Users/ahamadeh/Dropbox/GitHub/OSP/OSPSuite.ReportingEngine/data/"
theFileName   <- "popData.csv"
theNumberOfCommentLines <- 2
tempPopDataFiles <- ospsuite::splitPopulationFile(csvPopulationFile = paste0(theFolderName,fileName),
numberOfCores = theNumberOfSlaves,
outputFolder = theFolderName,
outputFileName = fileName)
tempPopDataFiles <- ospsuite::splitPopulationFile(csvPopulationFile = paste0(theFolderName,theFileName),
numberOfCores = theNumberOfSlaves,
outputFolder = theFolderName,
outputFileName = theFileName)
tempPopDataFiles
library('Rmpi')
library(ospsuite)
theNumberOfSlaves <- 5
theFolderName <- "C:/Users/ahamadeh/Dropbox/GitHub/OSP/OSPSuite.ReportingEngine/data/"
theFileName   <- "popData"
theNumberOfCommentLines <- 2
tempPopDataFiles <- ospsuite::splitPopulationFile(csvPopulationFile = paste0(theFolderName,theFileName,".csv"),
numberOfCores = theNumberOfSlaves,
outputFolder = theFolderName,
outputFileName = theFileName)
devtools::load_all(".")
devtools::document()
devtools::install()
devtools::install()
devtools::document()
devtools::install()
devtools::check()
devtools::document()
devtools::load_all(".")
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
typeof(1)
typeof(1.1)
is.integer
is.integer(1)
>is.integer
?is.integer
1%%1
1.5%%1
2.5%%1
isFALSE(1 %% 1 == 0)
isFALSE(1.5 %% 1 == 0)
substitute(1)
?substitute
x=1, substitute(x)
x=1, substitute(x=1)
x=1, substitute("x=1")
substitute("x=1")
substitute(x=1)
deparse(substitute(x=1))
deparse(substitute(x))
x=1
class(x)
devtools::load_all(".")
validateIsInteger(2)
devtools::load_all(".")
validateIsInteger(2)
validateIsInteger(2.5)
validateIsInteger("2.5")
validateIsInteger("2")
devtools::install()
devtools::document()
devtools::install()
devtools::install()
devtools::install()
devtools::document()
devtools::install()
devtools::check()
