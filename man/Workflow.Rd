% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/workflow.R
\name{Workflow}
\alias{Workflow}
\title{Workflow}
\description{
R6 class representing Reporting Engine generic Workflow
}
\keyword{internal}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{simulationStructures}}{`SimulationStructure` R6 class object managing the structure of the workflow output}

\item{\code{workflowFolder}}{path of the folder create by the Workflow}

\item{\code{taskNames}}{Enum of task names}

\item{\code{reportFileName}}{name of the Rmd report file}

\item{\code{reportTitle}}{report title page}

\item{\code{createWordReport}}{logical of option for creating Markdown-Report only but not a Word-Report.}

\item{\code{wordConversionTemplate}}{optional docx template for rendering a tuned Word-Report document}

\item{\code{userDefinedTasks}}{List of user-defined tasks (to update with loadUserDefinedTask)}

\item{\code{numberSections}}{logical defining if the report sections should be numbered}
}
\if{html}{\out{</div>}}
}
\section{Active bindings}{
\if{html}{\out{<div class="r6-active-bindings">}}
\describe{
\item{\code{reportFolder}}{Directory in which workflow report is saved}

\item{\code{reportFilePath}}{Path of workflow report}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-Workflow-new}{\code{Workflow$new()}}
\item \href{#method-Workflow-getAllTasks}{\code{Workflow$getAllTasks()}}
\item \href{#method-Workflow-getAllPlotTasks}{\code{Workflow$getAllPlotTasks()}}
\item \href{#method-Workflow-getActiveTasks}{\code{Workflow$getActiveTasks()}}
\item \href{#method-Workflow-getInactiveTasks}{\code{Workflow$getInactiveTasks()}}
\item \href{#method-Workflow-activateTasks}{\code{Workflow$activateTasks()}}
\item \href{#method-Workflow-inactivateTasks}{\code{Workflow$inactivateTasks()}}
\item \href{#method-Workflow-printReportingEngineInfo}{\code{Workflow$printReportingEngineInfo()}}
\item \href{#method-Workflow-getWatermark}{\code{Workflow$getWatermark()}}
\item \href{#method-Workflow-setWatermark}{\code{Workflow$setWatermark()}}
\item \href{#method-Workflow-setParameterDisplayPaths}{\code{Workflow$setParameterDisplayPaths()}}
\item \href{#method-Workflow-getParameterDisplayPaths}{\code{Workflow$getParameterDisplayPaths()}}
\item \href{#method-Workflow-setSimulationDescriptor}{\code{Workflow$setSimulationDescriptor()}}
\item \href{#method-Workflow-getSimulationDescriptor}{\code{Workflow$getSimulationDescriptor()}}
\item \href{#method-Workflow-print}{\code{Workflow$print()}}
\item \href{#method-Workflow-clone}{\code{Workflow$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Workflow-new"></a>}}
\if{latex}{\out{\hypertarget{method-Workflow-new}{}}}
\subsection{Method \code{new()}}{
Create a new `Workflow` object.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Workflow$new(
  simulationSets,
  workflowFolder,
  createWordReport = TRUE,
  wordConversionTemplate = NULL,
  watermark = NULL,
  simulationSetDescriptor = NULL,
  numberSections = TRUE,
  reportTitle = NULL,
  theme = NULL
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{simulationSets}}{list of `SimulationSet` R6 class objects}

\item{\code{workflowFolder}}{path of the output folder created or used by the Workflow.}

\item{\code{createWordReport}}{logical of option for creating Markdown-Report only but not a Word-Report.}

\item{\code{wordConversionTemplate}}{optional docx template for rendering a tuned Word-Report document}

\item{\code{watermark}}{displayed watermark in figures background}

\item{\code{simulationSetDescriptor}}{character Descriptor of simulation sets indicated in reports}

\item{\code{numberSections}}{logical defining if the report sections should be numbered}

\item{\code{reportTitle}}{report title internally added as a cover page
If `reportTitle` is an existing file, it will be merged to the report as cover page.}

\item{\code{theme}}{A `Theme` object from `{tlf}` package}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A new `Workflow` object
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Workflow-getAllTasks"></a>}}
\if{latex}{\out{\hypertarget{method-Workflow-getAllTasks}{}}}
\subsection{Method \code{getAllTasks()}}{
Get a vector with all the names of the tasks within the `Workflow`
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Workflow$getAllTasks()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
Vector of `Task` names
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Workflow-getAllPlotTasks"></a>}}
\if{latex}{\out{\hypertarget{method-Workflow-getAllPlotTasks}{}}}
\subsection{Method \code{getAllPlotTasks()}}{
Get a vector with all the names of the plot tasks within the `Workflow`
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Workflow$getAllPlotTasks()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
Vector of `PlotTask` names
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Workflow-getActiveTasks"></a>}}
\if{latex}{\out{\hypertarget{method-Workflow-getActiveTasks}{}}}
\subsection{Method \code{getActiveTasks()}}{
Get a vector with all the names of active tasks within the `Workflow`
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Workflow$getActiveTasks()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
Vector of active `Task` names
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Workflow-getInactiveTasks"></a>}}
\if{latex}{\out{\hypertarget{method-Workflow-getInactiveTasks}{}}}
\subsection{Method \code{getInactiveTasks()}}{
Get a vector with all the names of inactive tasks within the `Workflow`
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Workflow$getInactiveTasks()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
Vector of inactive `Task` names
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Workflow-activateTasks"></a>}}
\if{latex}{\out{\hypertarget{method-Workflow-activateTasks}{}}}
\subsection{Method \code{activateTasks()}}{
Activates a series of `Tasks` from current `Workflow`
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Workflow$activateTasks(tasks = self$getAllTasks())}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{tasks}}{names of the workflow tasks to activate.
Default activates all tasks of the workflow using workflow method `workflow$getAllTasks()`}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Vector of inactive `Task` names
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Workflow-inactivateTasks"></a>}}
\if{latex}{\out{\hypertarget{method-Workflow-inactivateTasks}{}}}
\subsection{Method \code{inactivateTasks()}}{
Inactivates a series of `Tasks` from current `Workflow`
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Workflow$inactivateTasks(tasks = self$getAllTasks())}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{tasks}}{names of the workflow tasks to inactivate.
Default inactivates all tasks of the workflow using workflow method `workflow$getAllTasks()`}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Vector of inactive `Task` names
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Workflow-printReportingEngineInfo"></a>}}
\if{latex}{\out{\hypertarget{method-Workflow-printReportingEngineInfo}{}}}
\subsection{Method \code{printReportingEngineInfo()}}{
Print reporting engine information obtained from initializing a `Workflow`
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Workflow$printReportingEngineInfo()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Workflow-getWatermark"></a>}}
\if{latex}{\out{\hypertarget{method-Workflow-getWatermark}{}}}
\subsection{Method \code{getWatermark()}}{
Get the current watermark to be reported on figures background
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Workflow$getWatermark()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Workflow-setWatermark"></a>}}
\if{latex}{\out{\hypertarget{method-Workflow-setWatermark}{}}}
\subsection{Method \code{setWatermark()}}{
Set the watermark to be reported on figure background.
The default value `NULL` leads to check if the computer has a validated environment.
If the environment is validated, no watermark is reported on the background.
If the environment is NOT validated, \code{workflowWatermarkMessage} is reported on the background.
Any user-defined text will overwrite this default feature and be reported on the figure background.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Workflow$setWatermark(watermark)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{watermark}}{text to be reported on figures background.
Default value is `NULL`, which leads to check if the computer has a validated environment.
If the environment is validated, no watermark is reported on the background.
If the environment is NOT validated, \code{workflowWatermarkMessage} is reported on the background.
Any user-defined text will overwrite this default feature and be reported on the figure background.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Workflow-setParameterDisplayPaths"></a>}}
\if{latex}{\out{\hypertarget{method-Workflow-setParameterDisplayPaths}{}}}
\subsection{Method \code{setParameterDisplayPaths()}}{
Set mapping between parameters and their display paths in workflow
to replace standard display of parameter paths.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Workflow$setParameterDisplayPaths(parameterDisplayPaths)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{parameterDisplayPaths}}{data.frame mapping Parameters with their display paths
Variables of the data.frame should include `parameter` and `displayPath`.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Workflow-getParameterDisplayPaths"></a>}}
\if{latex}{\out{\hypertarget{method-Workflow-getParameterDisplayPaths}{}}}
\subsection{Method \code{getParameterDisplayPaths()}}{
Get mapping between parameters and their display paths in workflow
to replace standard display of parameter paths.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Workflow$getParameterDisplayPaths()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
A data.frame with `parameter` and `displayPath` variables.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Workflow-setSimulationDescriptor"></a>}}
\if{latex}{\out{\hypertarget{method-Workflow-setSimulationDescriptor}{}}}
\subsection{Method \code{setSimulationDescriptor()}}{
Set descriptor of simulation sets indicated in reports
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Workflow$setSimulationDescriptor(text)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{text}}{character describing what simulation sets refer to}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Workflow-getSimulationDescriptor"></a>}}
\if{latex}{\out{\hypertarget{method-Workflow-getSimulationDescriptor}{}}}
\subsection{Method \code{getSimulationDescriptor()}}{
Get descriptor of simulation sets indicated in reports
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Workflow$getSimulationDescriptor()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
character Descriptor of simulation sets
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Workflow-print"></a>}}
\if{latex}{\out{\hypertarget{method-Workflow-print}{}}}
\subsection{Method \code{print()}}{
Print workflow list of tasks
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Workflow$print()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
Task list information
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Workflow-clone"></a>}}
\if{latex}{\out{\hypertarget{method-Workflow-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Workflow$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
