% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/task.R
\name{Task}
\alias{Task}
\title{Task}
\description{
R6 class for Task settings
}
\seealso{
Other workflow tasks: 
\code{\link{GofPlotTask}},
\code{\link{PlotTask}},
\code{\link{PopulationPlotTask}},
\code{\link{PopulationSensitivityAnalysisTask}},
\code{\link{QualificationTask}},
\code{\link{SensitivityAnalysisTask}},
\code{\link{addUserDefinedTask}()},
\code{\link{loadCalculatePKParametersTask}()},
\code{\link{loadCalculateSensitivityTask}()},
\code{\link{loadGOFMergedTask}()},
\code{\link{loadPlotAbsorptionTask}()},
\code{\link{loadPlotDDIRatioTask}()},
\code{\link{loadPlotDemographyTask}()},
\code{\link{loadPlotMassBalanceTask}()},
\code{\link{loadPlotPKParametersTask}()},
\code{\link{loadPlotPKRatioTask}()},
\code{\link{loadPlotSensitivityTask}()},
\code{\link{loadPlotTimeProfilesAndResidualsTask}()},
\code{\link{loadQualificationComparisonTimeProfileTask}()},
\code{\link{loadQualificationTimeProfilesTask}()},
\code{\link{loadSimulateTask}()}
}
\concept{workflow tasks}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{active}}{logical indicating if \code{Task} is performed in a workflow.}

\item{\code{outputFolder}}{List of output files/folders to save the task output}

\item{\code{workflowFolder}}{folder where workflow is run and saved}

\item{\code{settings}}{list of settings for task such as plot configurations}

\item{\code{message}}{message or title of the task}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-Task-new}{\code{Task$new()}}
\item \href{#method-Task-activate}{\code{Task$activate()}}
\item \href{#method-Task-inactivate}{\code{Task$inactivate()}}
\item \href{#method-Task-validateInput}{\code{Task$validateInput()}}
\item \href{#method-Task-validateStructureSetInput}{\code{Task$validateStructureSetInput()}}
\item \href{#method-Task-print}{\code{Task$print()}}
\item \href{#method-Task-getRelativePath}{\code{Task$getRelativePath()}}
\item \href{#method-Task-getAbsolutePath}{\code{Task$getAbsolutePath()}}
\item \href{#method-Task-getInputs}{\code{Task$getInputs()}}
\item \href{#method-Task-clone}{\code{Task$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Task-new"></a>}}
\if{latex}{\out{\hypertarget{method-Task-new}{}}}
\subsection{Method \code{new()}}{
Create a \code{Task} object
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Task$new(
  outputFolder = NULL,
  inputFolder = NULL,
  inputs = NULL,
  outputs = NULL,
  workflowFolder = getwd(),
  settings = NULL,
  active = FALSE,
  message = NULL
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{outputFolder}}{task output folder to save results}

\item{\code{inputFolder}}{task input folder where input files are stored}

\item{\code{inputs}}{expected input files required by task}

\item{\code{outputs}}{expected output files generated by task}

\item{\code{workflowFolder}}{folder where workflow is run and saved}

\item{\code{settings}}{specific settings for task (e.g. plot configurations)}

\item{\code{active}}{logical indicating if \code{Task} is performed in a workflow.
Default value is \code{FALSE}}

\item{\code{message}}{message of the \code{Task}.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A new \code{Task} object
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Task-activate"></a>}}
\if{latex}{\out{\hypertarget{method-Task-activate}{}}}
\subsection{Method \code{activate()}}{
Activate \code{Task}
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Task$activate()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Task-inactivate"></a>}}
\if{latex}{\out{\hypertarget{method-Task-inactivate}{}}}
\subsection{Method \code{inactivate()}}{
Inactivate \code{Task}
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Task$inactivate()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Task-validateInput"></a>}}
\if{latex}{\out{\hypertarget{method-Task-validateInput}{}}}
\subsection{Method \code{validateInput()}}{
Check if \code{Task} inputs exist
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Task$validateInput()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
logical indicating if input is valid
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Task-validateStructureSetInput"></a>}}
\if{latex}{\out{\hypertarget{method-Task-validateStructureSetInput}{}}}
\subsection{Method \code{validateStructureSetInput()}}{
Check if a task input from a specific \code{SimulationStructure} is valid
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Task$validateStructureSetInput(structureSet)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{structureSet}}{\code{SimulationStructure} object}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
logical indicating if input is valid
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Task-print"></a>}}
\if{latex}{\out{\hypertarget{method-Task-print}{}}}
\subsection{Method \code{print()}}{
Print \code{Task} features
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Task$print()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
Text of task features
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Task-getRelativePath"></a>}}
\if{latex}{\out{\hypertarget{method-Task-getRelativePath}{}}}
\subsection{Method \code{getRelativePath()}}{
Get the relative path to a file to be output by this task
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Task$getRelativePath(fileName)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{fileName}}{name (with extension) of the file to be output}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Output file's relative path
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Task-getAbsolutePath"></a>}}
\if{latex}{\out{\hypertarget{method-Task-getAbsolutePath}{}}}
\subsection{Method \code{getAbsolutePath()}}{
Get the absolute path to a file to be output by this task
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Task$getAbsolutePath(fileName)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{fileName}}{name (with extension) of the file to be output}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Output file's absolute path
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Task-getInputs"></a>}}
\if{latex}{\out{\hypertarget{method-Task-getInputs}{}}}
\subsection{Method \code{getInputs()}}{
Get \code{Task} required input files
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Task$getInputs()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
Required file names
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Task-clone"></a>}}
\if{latex}{\out{\hypertarget{method-Task-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Task$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
