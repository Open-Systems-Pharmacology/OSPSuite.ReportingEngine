% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/gof-plot-task.R
\name{GofPlotTask}
\alias{GofPlotTask}
\title{GofPlotTask}
\description{
R6 class for GofPlotTask settings
}
\seealso{
Other workflow tasks: 
\code{\link{PlotTask}},
\code{\link{PopulationPlotTask}},
\code{\link{PopulationSensitivityAnalysisTask}},
\code{\link{QualificationTask}},
\code{\link{SensitivityAnalysisTask}},
\code{\link{Task}},
\code{\link{addUserDefinedTask}()},
\code{\link{loadCalculatePKParametersTask}()},
\code{\link{loadCalculateSensitivityTask}()},
\code{\link{loadGOFMergedTask}()},
\code{\link{loadPlotAbsorptionTask}()},
\code{\link{loadPlotDDIRatioTask}()},
\code{\link{loadPlotDemographyTask}()},
\code{\link{loadPlotMassBalanceTask}()},
\code{\link{loadPlotPKParametersTask}()},
\code{\link{loadPlotPKRatioTask}()},
\code{\link{loadPlotSensitivityTask}()},
\code{\link{loadPlotTimeProfilesAndResidualsTask}()},
\code{\link{loadQualificationComparisonTimeProfileTask}()},
\code{\link{loadQualificationTimeProfilesTask}()},
\code{\link{loadSimulateTask}()}
}
\concept{workflow tasks}
\section{Super classes}{
\code{\link[ospsuite.reportingengine:Task]{ospsuite.reportingengine::Task}} -> \code{\link[ospsuite.reportingengine:PlotTask]{ospsuite.reportingengine::PlotTask}} -> \code{GofPlotTask}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-GofPlotTask-saveResults}{\code{GofPlotTask$saveResults()}}
\item \href{#method-GofPlotTask-saveResidualsResults}{\code{GofPlotTask$saveResidualsResults()}}
\item \href{#method-GofPlotTask-runTask}{\code{GofPlotTask$runTask()}}
\item \href{#method-GofPlotTask-getResidualsResults}{\code{GofPlotTask$getResidualsResults()}}
\item \href{#method-GofPlotTask-clone}{\code{GofPlotTask$clone()}}
}
}
\if{html}{\out{
<details><summary>Inherited methods</summary>
<ul>
<li><span class="pkg-link" data-pkg="ospsuite.reportingengine" data-topic="Task" data-id="activate"><a href='../../ospsuite.reportingengine/html/Task.html#method-Task-activate'><code>ospsuite.reportingengine::Task$activate()</code></a></span></li>
<li><span class="pkg-link" data-pkg="ospsuite.reportingengine" data-topic="Task" data-id="getAbsolutePath"><a href='../../ospsuite.reportingengine/html/Task.html#method-Task-getAbsolutePath'><code>ospsuite.reportingengine::Task$getAbsolutePath()</code></a></span></li>
<li><span class="pkg-link" data-pkg="ospsuite.reportingengine" data-topic="Task" data-id="getInputs"><a href='../../ospsuite.reportingengine/html/Task.html#method-Task-getInputs'><code>ospsuite.reportingengine::Task$getInputs()</code></a></span></li>
<li><span class="pkg-link" data-pkg="ospsuite.reportingengine" data-topic="Task" data-id="getRelativePath"><a href='../../ospsuite.reportingengine/html/Task.html#method-Task-getRelativePath'><code>ospsuite.reportingengine::Task$getRelativePath()</code></a></span></li>
<li><span class="pkg-link" data-pkg="ospsuite.reportingengine" data-topic="Task" data-id="inactivate"><a href='../../ospsuite.reportingengine/html/Task.html#method-Task-inactivate'><code>ospsuite.reportingengine::Task$inactivate()</code></a></span></li>
<li><span class="pkg-link" data-pkg="ospsuite.reportingengine" data-topic="Task" data-id="print"><a href='../../ospsuite.reportingengine/html/Task.html#method-Task-print'><code>ospsuite.reportingengine::Task$print()</code></a></span></li>
<li><span class="pkg-link" data-pkg="ospsuite.reportingengine" data-topic="Task" data-id="validateInput"><a href='../../ospsuite.reportingengine/html/Task.html#method-Task-validateInput'><code>ospsuite.reportingengine::Task$validateInput()</code></a></span></li>
<li><span class="pkg-link" data-pkg="ospsuite.reportingengine" data-topic="Task" data-id="validateStructureSetInput"><a href='../../ospsuite.reportingengine/html/Task.html#method-Task-validateStructureSetInput'><code>ospsuite.reportingengine::Task$validateStructureSetInput()</code></a></span></li>
<li><span class="pkg-link" data-pkg="ospsuite.reportingengine" data-topic="PlotTask" data-id="initialize"><a href='../../ospsuite.reportingengine/html/PlotTask.html#method-PlotTask-initialize'><code>ospsuite.reportingengine::PlotTask$initialize()</code></a></span></li>
</ul>
</details>
}}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-GofPlotTask-saveResults"></a>}}
\if{latex}{\out{\hypertarget{method-GofPlotTask-saveResults}{}}}
\subsection{Method \code{saveResults()}}{
Save the task results related to a `structureSet`.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{GofPlotTask$saveResults(structureSet, taskResults)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{structureSet}}{A `SimulationStructure` object defining the properties of a simulation set}

\item{\code{taskResults}}{list of `TaskResults` objects}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-GofPlotTask-saveResidualsResults"></a>}}
\if{latex}{\out{\hypertarget{method-GofPlotTask-saveResidualsResults}{}}}
\subsection{Method \code{saveResidualsResults()}}{
Save the task results related to residuals across all simulations
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{GofPlotTask$saveResidualsResults(taskResults)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{taskResults}}{list of `TaskResults` objects}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-GofPlotTask-runTask"></a>}}
\if{latex}{\out{\hypertarget{method-GofPlotTask-runTask}{}}}
\subsection{Method \code{runTask()}}{
Run task and save its output results
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{GofPlotTask$runTask(structureSets)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{structureSets}}{list of `SimulationStructure` objects}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-GofPlotTask-getResidualsResults"></a>}}
\if{latex}{\out{\hypertarget{method-GofPlotTask-getResidualsResults}{}}}
\subsection{Method \code{getResidualsResults()}}{
Get plot results for residuals across all simulations
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{GofPlotTask$getResidualsResults(structureSets, data, metaData, settings)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{structureSets}}{A list of `SimulationStructure` objects defining the properties of a simulation set}

\item{\code{data}}{data.frame}

\item{\code{metaData}}{A data.frame containing relevant information about the residuals}

\item{\code{settings}}{List of settings such as `PlotConfiguration` R6 class objects for each goodness of fit plot}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A list of `TaskResults` objects
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-GofPlotTask-clone"></a>}}
\if{latex}{\out{\hypertarget{method-GofPlotTask-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{GofPlotTask$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
